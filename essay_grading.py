import streamlit as st
import json
from datetime import datetime
from database_helper import (
    get_supabase_client, 
    get_all_questions, 
    get_all_users,
    update_submission
)

def essay_grading_interface():
    """Interface cho gi·∫£ng vi√™n ch·∫•m ƒëi·ªÉm c√¢u h·ªèi t·ª± lu·∫≠n"""
    st.title("üéØ Ch·∫•m ƒëi·ªÉm c√¢u h·ªèi t·ª± lu·∫≠n")
    
    # L·∫•y d·ªØ li·ªáu
    try:
        supabase = get_supabase_client()
        if not supabase:
            st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn database")
            return
            
        # L·∫•y t·∫•t c·∫£ b√†i n·ªôp c√≥ c√¢u h·ªèi t·ª± lu·∫≠n
        submissions_result = supabase.table("submissions").select("*").execute()
        submissions = submissions_result.data if submissions_result.data else []
        
        questions = get_all_questions()
        students = get_all_users(role="student")
        
        # L·ªçc c√°c c√¢u h·ªèi t·ª± lu·∫≠n
        essay_questions = [q for q in questions if q.get("type") == "Essay"]
        
        if not essay_questions:
            st.info("Kh√¥ng c√≥ c√¢u h·ªèi t·ª± lu·∫≠n n√†o trong h·ªá th·ªëng.")
            return
            
        if not submissions:
            st.info("Ch∆∞a c√≥ b√†i n·ªôp n√†o ƒë·ªÉ ch·∫•m.")
            return
            
        # Hi·ªÉn th·ªã th·ªëng k√™
        st.subheader("Th·ªëng k√™ ch·∫•m ƒëi·ªÉm")
        
        total_essays = 0
        graded_essays = 0
        
        for submission in submissions:
            essay_grades = submission.get("essay_grades", {})
            if isinstance(essay_grades, str):
                try:
                    essay_grades = json.loads(essay_grades)
                except:
                    essay_grades = {}
                    
            responses = submission.get("responses", {})
            if isinstance(responses, str):
                try:
                    responses = json.loads(responses)
                except:
                    responses = {}
            
            for eq in essay_questions:
                eq_id = str(eq.get("id"))
                if eq_id in responses and responses[eq_id]:
                    total_essays += 1
                    if eq_id in essay_grades:
                        graded_essays += 1
        
        col1, col2, col3 = st.columns(3)
        col1.metric("T·ªïng s·ªë b√†i t·ª± lu·∫≠n", total_essays)
        col2.metric("ƒê√£ ch·∫•m ƒëi·ªÉm", graded_essays)
        col3.metric("Ch∆∞a ch·∫•m", total_essays - graded_essays)
        
        # B·ªô l·ªçc
        st.subheader("B·ªô l·ªçc")
        
        col1, col2 = st.columns(2)
        with col1:
            filter_status = st.selectbox(
                "Tr·∫°ng th√°i ch·∫•m ƒëi·ªÉm:",
                ["T·∫•t c·∫£", "Ch∆∞a ch·∫•m", "ƒê√£ ch·∫•m"]
            )
            
        with col2:
            filter_question = st.selectbox(
                "C√¢u h·ªèi:",
                ["T·∫•t c·∫£"] + [f"C√¢u {q['id']}: {q['question'][:50]}..." for q in essay_questions]
            )
        
        # L·ªçc v√† hi·ªÉn th·ªã b√†i n·ªôp
        filtered_submissions = []
        
        for submission in submissions:
            essay_grades = submission.get("essay_grades", {})
            if isinstance(essay_grades, str):
                try:
                    essay_grades = json.loads(essay_grades)
                except:
                    essay_grades = {}
                    
            responses = submission.get("responses", {})
            if isinstance(responses, str):
                try:
                    responses = json.loads(responses)
                except:
                    responses = {}
            
            for eq in essay_questions:
                eq_id = str(eq.get("id"))
                if eq_id in responses and responses[eq_id]:
                    # √Åp d·ª•ng b·ªô l·ªçc
                    if filter_status == "Ch∆∞a ch·∫•m" and eq_id in essay_grades:
                        continue
                    if filter_status == "ƒê√£ ch·∫•m" and eq_id not in essay_grades:
                        continue
                    if filter_question != "T·∫•t c·∫£" and not filter_question.startswith(f"C√¢u {eq['id']}"):
                        continue
                        
                    filtered_submissions.append({
                        "submission": submission,
                        "question": eq,
                        "is_graded": eq_id in essay_grades,
                        "current_grade": essay_grades.get(eq_id, 0)
                    })
        
        # Hi·ªÉn th·ªã danh s√°ch b√†i c·∫ßn ch·∫•m
        st.subheader("Danh s√°ch b√†i c·∫ßn ch·∫•m")
        
        if not filtered_submissions:
            st.info("Kh√¥ng c√≥ b√†i n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc.")
            return
            
        for idx, item in enumerate(filtered_submissions):
            submission = item["submission"]
            question = item["question"]
            is_graded = item["is_graded"]
            current_grade = item["current_grade"]
            
            # T√¨m th√¥ng tin h·ªçc vi√™n
            student_info = next(
                (s for s in students if s.get("email") == submission.get("user_email")), 
                None
            )
            student_name = student_info.get("full_name", "Kh√¥ng x√°c ƒë·ªãnh") if student_info else "Kh√¥ng x√°c ƒë·ªãnh"
            
            # Hi·ªÉn th·ªã b√†i l√†m
            with st.expander(
                f"{'‚úÖ' if is_graded else '‚è≥'} {student_name} - C√¢u {question['id']} - "
                f"{'ƒê√£ ch·∫•m' if is_graded else 'Ch∆∞a ch·∫•m'}"
            ):
                # Th√¥ng tin b√†i n·ªôp
                col1, col2 = st.columns(2)
                with col1:
                    st.write(f"**H·ªçc vi√™n:** {student_name}")
                    st.write(f"**Email:** {submission.get('user_email')}")
                    
                with col2:
                    # X·ª≠ l√Ω timestamp
                    timestamp = submission.get("timestamp", "")
                    if isinstance(timestamp, str):
                        try:
                            dt = datetime.fromisoformat(timestamp.replace("Z", "+00:00"))
                            submit_time = dt.strftime("%H:%M:%S %d/%m/%Y")
                        except:
                            submit_time = "Kh√¥ng x√°c ƒë·ªãnh"
                    else:
                        try:
                            submit_time = datetime.fromtimestamp(timestamp).strftime("%H:%M:%S %d/%m/%Y")
                        except:
                            submit_time = "Kh√¥ng x√°c ƒë·ªãnh"
                    
                    st.write(f"**Th·ªùi gian n·ªôp:** {submit_time}")
                    st.write(f"**ID b√†i n·ªôp:** {submission.get('id')}")
                
                # Hi·ªÉn th·ªã c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi
                st.write(f"**C√¢u h·ªèi:** {question['question']}")
                st.write(f"**ƒêi·ªÉm t·ªëi ƒëa:** {question.get('score', 0)}")
                
                # L·∫•y c√¢u tr·∫£ l·ªùi
                responses = submission.get("responses", {})
                if isinstance(responses, str):
                    try:
                        responses = json.loads(responses)
                    except:
                        responses = {}
                
                q_id = str(question["id"])
                essay_answer = responses.get(q_id, [""])[0] if responses.get(q_id) else ""
                
                st.write("**C√¢u tr·∫£ l·ªùi c·ªßa h·ªçc vi√™n:**")
                st.text_area(
                    "", 
                    value=essay_answer, 
                    height=200, 
                    disabled=True,
                    key=f"answer_{submission['id']}_{q_id}"
                )
                
                # Form ch·∫•m ƒëi·ªÉm
                with st.form(key=f"grading_form_{submission['id']}_{q_id}"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        grade = st.number_input(
                            "ƒêi·ªÉm s·ªë:",
                            min_value=0.0,
                            max_value=float(question.get('score', 0)),
                            value=float(current_grade),
                            step=0.5,
                            key=f"grade_{submission['id']}_{q_id}"
                        )
                    
                    with col2:
                        # L·∫•y nh·∫≠n x√©t hi·ªán t·∫°i
                        essay_comments = submission.get("essay_comments", {})
                        if isinstance(essay_comments, str):
                            try:
                                essay_comments = json.loads(essay_comments)
                            except:
                                essay_comments = {}
                        
                        current_comment = essay_comments.get(q_id, "")
                        
                        comment = st.text_area(
                            "Nh·∫≠n x√©t:",
                            value=current_comment,
                            height=100,
                            key=f"comment_{submission['id']}_{q_id}"
                        )
                    
                    submit_grade = st.form_submit_button("üíæ L∆∞u ƒëi·ªÉm")
                    
                    if submit_grade:
                        # C·∫≠p nh·∫≠t ƒëi·ªÉm v√† nh·∫≠n x√©t
                        if update_essay_grade(submission["id"], q_id, grade, comment):
                            st.success("‚úÖ ƒê√£ l∆∞u ƒëi·ªÉm th√†nh c√¥ng!")
                            st.rerun()
                        else:
                            st.error("‚ùå C√≥ l·ªói khi l∆∞u ƒëi·ªÉm!")
                
                # Hi·ªÉn th·ªã tr·∫°ng th√°i hi·ªán t·∫°i
                if is_graded:
                    st.success(f"‚úÖ ƒê√£ ch·∫•m ƒëi·ªÉm: {current_grade}/{question.get('score', 0)}")
                else:
                    st.warning("‚è≥ Ch∆∞a ch·∫•m ƒëi·ªÉm")
                    
    except Exception as e:
        st.error(f"C√≥ l·ªói x·∫£y ra: {str(e)}")

# Thay th·∫ø h√†m update_essay_grade hi·ªán t·∫°i:

def update_essay_grade(submission_id, question_id, grade, comment):
    """C·∫≠p nh·∫≠t ƒëi·ªÉm v√† nh·∫≠n x√©t cho c√¢u h·ªèi t·ª± lu·∫≠n - ƒê√É S·ª¨A L·ªñI KI·ªÇU D·ªÆ LI·ªÜU"""
    try:
        supabase = get_supabase_client()
        if not supabase:
            return False
            
        print(f"üîÑ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t ƒëi·ªÉm cho submission {submission_id}, c√¢u {question_id}")
        
        # L·∫•y th√¥ng tin b√†i n·ªôp hi·ªán t·∫°i
        result = supabase.table("submissions").select("*").eq("id", submission_id).execute()
        if not result.data:
            print("‚ùå Kh√¥ng t√¨m th·∫•y submission")
            return False
            
        submission = result.data[0]
        print(f"üìä ƒêi·ªÉm hi·ªán t·∫°i: {submission.get('score', 0)}")
        
        # C·∫≠p nh·∫≠t essay_grades
        essay_grades = submission.get("essay_grades", {})
        if isinstance(essay_grades, str):
            try:
                essay_grades = json.loads(essay_grades)
            except:
                essay_grades = {}
        
        # üîß S·ª¨A: ƒê·∫£m b·∫£o grade l√† s·ªë v√† l∆∞u d∆∞·ªõi d·∫°ng number trong JSON
        try:
            grade_number = float(grade)
        except (ValueError, TypeError):
            grade_number = 0.0
        
        # L∆∞u ƒëi·ªÉm c≈© ƒë·ªÉ debug
        old_grade = essay_grades.get(question_id, 0)
        essay_grades[question_id] = grade_number  # üîß L∆∞u d∆∞·ªõi d·∫°ng number, kh√¥ng ph·∫£i string
        print(f"üìù C·∫≠p nh·∫≠t ƒëi·ªÉm c√¢u {question_id}: {old_grade} ‚Üí {grade_number}")
        
        # C·∫≠p nh·∫≠t essay_comments
        essay_comments = submission.get("essay_comments", {})
        if isinstance(essay_comments, str):
            try:
                essay_comments = json.loads(essay_comments)
            except:
                essay_comments = {}
        
        essay_comments[question_id] = str(comment)
        
        # ‚úÖ T√çNH L·∫†I T·ªîNG ƒêI·ªÇM B·∫∞NG H√ÄM calculate_total_score
        questions = get_all_questions()
        
        # T·∫°o submission m·ªõi v·ªõi essay_grades ƒë√£ c·∫≠p nh·∫≠t
        updated_submission = submission.copy()
        updated_submission["essay_grades"] = essay_grades
        
        # Import v√† t√≠nh l·∫°i t·ªïng ƒëi·ªÉm
        from database_helper import calculate_total_score
        new_total_score = calculate_total_score(updated_submission, questions)
        
        print(f"üéØ T·ªïng ƒëi·ªÉm m·ªõi: {new_total_score} (type: {type(new_total_score)})")
        
        # üîß S·ª¨A: ƒê·∫£m b·∫£o new_total_score l√† INTEGER
        if not isinstance(new_total_score, int):
            new_total_score = int(round(float(new_total_score)))
            print(f"üîß Converted to integer: {new_total_score}")
        
        # C·∫≠p nh·∫≠t v√†o database
        update_data = {
            "essay_grades": json.dumps(essay_grades),
            "essay_comments": json.dumps(essay_comments),
            "score": new_total_score  # ‚úÖ ƒê·∫¢M B·∫¢O L√Ä INTEGER
        }
        
        print(f"üì§ D·ªØ li·ªáu c·∫≠p nh·∫≠t: {update_data}")
        
        result = supabase.table("submissions").update(update_data).eq("id", submission_id).execute()
        
        if result.data:
            print(f"‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng! ƒêi·ªÉm m·ªõi: {new_total_score}")
            return True
        else:
            print("‚ùå L·ªói khi c·∫≠p nh·∫≠t database")
            return False
        
    except Exception as e:
        print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t ƒëi·ªÉm: {str(e)}")
        import traceback
        traceback.print_exc()
        return False
