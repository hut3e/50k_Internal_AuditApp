import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import io
import base64
from datetime import datetime
import numpy as np
import json
import sys
import traceback
import os

from docx.shared import Inches
from docx.oxml.ns import nsdecls
from docx.oxml import parse_xml

# Th√™m v√†o ƒë·∫ßu file - Thay ƒë·ªïi sang fpdf2 thay v√¨ fpdf
from fpdf import FPDF
# Th√™m th∆∞ vi·ªán ƒë·ªÉ h·ªó tr·ª£ Unicode
import pkg_resources

from database_helper import get_supabase_client

# Nh·∫≠p c√°c th∆∞ vi·ªán cho xu·∫•t file
try:
    from docx import Document
    from docx.shared import Pt, RGBColor
except ImportError:
    # Hi·ªÉn th·ªã th√¥ng b√°o ch·ªâ khi ƒëang ch·∫°y trong Streamlit
    if 'streamlit' in sys.modules:
        st.warning("Module python-docx kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t. T√≠nh nƒÉng xu·∫•t DOCX s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.")

# S·ª≠ d·ª•ng WD_ALIGN_PARAGRAPH n·∫øu c√≥ th·ªÉ, n·∫øu kh√¥ng t·∫°o class thay th·∫ø
try:
    from docx.enum.text import WD_ALIGN_PARAGRAPH
except ImportError:
    class WD_ALIGN_PARAGRAPH:
        CENTER = 1
        RIGHT = 2
        LEFT = 0

# H·ªó tr·ª£ xu·∫•t PDF v·ªõi reportlab n·∫øu c·∫ßn
try:
    from reportlab.lib.pagesizes import A4
    from reportlab.lib import colors
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
    from reportlab.pdfbase import pdfmetrics
    from reportlab.pdfbase.ttfonts import TTFont
except ImportError:
    # Hi·ªÉn th·ªã th√¥ng b√°o ch·ªâ khi ƒëang ch·∫°y trong Streamlit
    if 'streamlit' in sys.modules:
        st.warning("Module reportlab kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t. T√≠nh nƒÉng xu·∫•t PDF s·∫Ω b·ªã h·∫°n ch·∫ø.")

# ===============================
# C√ÅC H√ÄM K·∫æT N·ªêI DATABASE
# ===============================

def check_answer_correctness(user_ans, q):
    """Ki·ªÉm tra ƒë√°p √°n c√≥ ƒë√∫ng kh√¥ng - HO√ÄN THI·ªÜN"""
    try:
        # N·∫øu c√¢u tr·∫£ l·ªùi tr·ªëng, kh√¥ng ƒë√∫ng
        if not user_ans:
            return False
        
        # ƒê·∫£m b·∫£o q["answers"] l√† list
        q_answers = q.get("answers", [])
        if isinstance(q_answers, str):
            try:
                q_answers = json.loads(q_answers)
            except:
                q_answers = [q_answers]
        
        # ƒê·∫£m b·∫£o q["correct"] l√† list
        q_correct = q.get("correct", [])
        if isinstance(q_correct, str):
            try:
                q_correct = json.loads(q_correct)
            except:
                try:
                    q_correct = [int(x.strip()) for x in q_correct.split(",")]
                except:
                    q_correct = []
        
        # ƒê·ªëi v·ªõi c√¢u h·ªèi Essay
        if q.get("type") == "Essay":
            # Essay ƒë∆∞·ª£c coi l√† ƒë√∫ng n·∫øu c√≥ tr·∫£ l·ªùi (kh√¥ng r·ªóng)
            if isinstance(user_ans, list) and len(user_ans) > 0:
                return bool(user_ans[0] and str(user_ans[0]).strip())
            return bool(user_ans and str(user_ans).strip())
        
        # ƒê·ªëi v·ªõi c√¢u h·ªèi Combobox (ch·ªâ ch·ªçn m·ªôt)
        elif q.get("type") == "Combobox":
            if len(user_ans) == 1:
                answer_text = user_ans[0]
                try:
                    answer_index = q_answers.index(answer_text) + 1
                    return answer_index in q_correct
                except (ValueError, IndexError):
                    return False
            return False
        
        # ƒê·ªëi v·ªõi c√¢u h·ªèi Checkbox (nhi·ªÅu l·ª±a ch·ªçn)
        elif q.get("type") == "Checkbox":
            selected_indices = []
            for ans in user_ans:
                try:
                    answer_index = q_answers.index(ans) + 1
                    selected_indices.append(answer_index)
                except (ValueError, IndexError):
                    continue
            
            # So s√°nh t·∫≠p h·ª£p ƒë·ªÉ kh√¥ng ph·ª• thu·ªôc th·ª© t·ª±
            return set(selected_indices) == set(q_correct)
        
        return False
        
    except Exception as e:
        print(f"L·ªói check_answer_correctness: {str(e)}")
        return False

def get_all_questions():
    """L·∫•y t·∫•t c·∫£ c√¢u h·ªèi t·ª´ database - HO√ÄN THI·ªÜN"""
    try:
        supabase = get_supabase_client()
        if not supabase:
            #print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Supabase trong get_all_questions")
            return []
        
        # L·∫•y t·∫•t c·∫£ c√¢u h·ªèi, s·∫Øp x·∫øp theo ID
        result = supabase.table("questions").select("*").order("id").execute()
        
        if result.data:
            #print(f"‚úÖ ƒê√£ l·∫•y {len(result.data)} c√¢u h·ªèi t·ª´ database")
            
            # X·ª≠ l√Ω d·ªØ li·ªáu ƒë·ªÉ ƒë·∫£m b·∫£o format ƒë√∫ng
            processed_questions = []
            for q in result.data:
                try:
                    # ƒê·∫£m b·∫£o answers l√† list
                    if isinstance(q.get("answers"), str):
                        try:
                            q["answers"] = json.loads(q["answers"])
                        except:
                            q["answers"] = [q["answers"]]
                    
                    # ƒê·∫£m b·∫£o correct l√† list
                    if isinstance(q.get("correct"), str):
                        try:
                            q["correct"] = json.loads(q["correct"])
                        except:
                            try:
                                q["correct"] = [int(x.strip()) for x in q["correct"].split(",")]
                            except:
                                q["correct"] = []
                    
                    # ƒê·∫£m b·∫£o score l√† s·ªë
                    if isinstance(q.get("score"), str):
                        try:
                            q["score"] = int(q["score"])
                        except:
                            q["score"] = 0
                    
                    processed_questions.append(q)
                    
                except Exception as e:
                    print(f"L·ªói x·ª≠ l√Ω c√¢u h·ªèi ID {q.get('id', 'N/A')}: {str(e)}")
                    continue
            
            return processed_questions
        else:
            print("‚ö†Ô∏è Kh√¥ng c√≥ c√¢u h·ªèi n√†o trong database")
            return []
        
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y questions: {str(e)}")
        traceback.print_exc()
        return []

def get_all_users(role=None):
    """L·∫•y t·∫•t c·∫£ users t·ª´ database v·ªõi role c·ª• th·ªÉ - HO√ÄN THI·ªÜN"""
    try:
        supabase = get_supabase_client()
        if not supabase:
            print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Supabase trong get_all_users")
            return []
        
        # T·∫°o query v·ªõi ho·∫∑c kh√¥ng c√≥ filter role
        if role:
            result = supabase.table("users").select("*").eq("role", role).execute()
            print(f"üîç ƒêang t√¨m users v·ªõi role: {role}")
        else:
            result = supabase.table("users").select("*").execute()
            print("üîç ƒêang l·∫•y t·∫•t c·∫£ users")
        
        if result.data:
            print(f"‚úÖ ƒê√£ l·∫•y {len(result.data)} users t·ª´ database")
            
            # Log th√¥ng tin users ƒë·ªÉ debug  
            for user in result.data[:3]:  # Ch·ªâ log 3 user ƒë·∫ßu
                print(f"   - {user.get('email', 'N/A')} ({user.get('role', 'N/A')}) - {user.get('full_name', 'N/A')}")
            
            return result.data
        else:
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y users n√†o" + (f" v·ªõi role {role}" if role else ""))
            return []
        
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y users: {str(e)}")
        traceback.print_exc()
        return []

def get_user_submissions(email):
    """L·∫•y t·∫•t c·∫£ b√†i n·ªôp c·ªßa m·ªôt user - HO√ÄN THI·ªÜN"""
    try:
        if not email:
            print("‚ùå Email kh√¥ng h·ª£p l·ªá trong get_user_submissions")
            return []
            
        supabase = get_supabase_client()
        if not supabase:
            print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Supabase trong get_user_submissions")
            return []
        
        print(f"üîç ƒêang t√¨m submissions c·ªßa user: {email}")
        
        # L·∫•y t·∫•t c·∫£ b√†i n·ªôp c·ªßa user, s·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t
        result = supabase.table("submissions").select("*").eq("user_email", email).order("timestamp", desc=True).execute()
        
        if result.data:
            print(f"‚úÖ ƒê√£ l·∫•y {len(result.data)} submissions c·ªßa {email}")
            
            # X·ª≠ l√Ω d·ªØ li·ªáu ƒë·ªÉ ƒë·∫£m b·∫£o format ƒë√∫ng
            processed_submissions = []
            for s in result.data:
                try:
                    # X·ª≠ l√Ω responses JSON
                    if isinstance(s.get("responses"), str):
                        try:
                            s["responses"] = json.loads(s["responses"])
                        except:
                            s["responses"] = {}
                    
                    # X·ª≠ l√Ω essay_grades JSON
                    if isinstance(s.get("essay_grades"), str):
                        try:
                            s["essay_grades"] = json.loads(s["essay_grades"])
                        except:
                            s["essay_grades"] = {}
                    
                    # X·ª≠ l√Ω essay_comments JSON
                    if isinstance(s.get("essay_comments"), str):
                        try:
                            s["essay_comments"] = json.loads(s["essay_comments"])
                        except:
                            s["essay_comments"] = {}
                    
                    # ƒê·∫£m b·∫£o score l√† s·ªë
                    if isinstance(s.get("score"), str):
                        try:
                            s["score"] = int(s["score"])
                        except:
                            s["score"] = 0
                    
                    processed_submissions.append(s)
                    
                except Exception as e:
                    print(f"L·ªói x·ª≠ l√Ω submission ID {s.get('id', 'N/A')}: {str(e)}")
                    continue
            
            return processed_submissions
        else:
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y submissions n√†o c·ªßa {email}")
            return []
        
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y submissions c·ªßa {email}: {str(e)}")
        traceback.print_exc()
        return []

def get_all_submissions():
    """L·∫•y t·∫•t c·∫£ b√†i n·ªôp t·ª´ database - H√ÄM M·ªöI"""
    try:
        supabase = get_supabase_client()
        if not supabase:
            print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Supabase trong get_all_submissions")
            return []
        
        print("üîç ƒêang l·∫•y t·∫•t c·∫£ submissions...")
        
        # L·∫•y t·∫•t c·∫£ b√†i n·ªôp, s·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t
        result = supabase.table("submissions").select("*").order("timestamp", desc=True).execute()
        
        if result.data:
            print(f"‚úÖ ƒê√£ l·∫•y {len(result.data)} submissions t·ª´ database")
            
            # X·ª≠ l√Ω d·ªØ li·ªáu ƒë·ªÉ ƒë·∫£m b·∫£o format ƒë√∫ng
            processed_submissions = []
            for s in result.data:
                try:
                    # X·ª≠ l√Ω responses JSON
                    if isinstance(s.get("responses"), str):
                        try:
                            s["responses"] = json.loads(s["responses"])
                        except:
                            s["responses"] = {}
                    
                    # X·ª≠ l√Ω essay_grades JSON
                    if isinstance(s.get("essay_grades"), str):
                        try:
                            s["essay_grades"] = json.loads(s["essay_grades"])
                        except:
                            s["essay_grades"] = {}
                    
                    # X·ª≠ l√Ω essay_comments JSON
                    if isinstance(s.get("essay_comments"), str):
                        try:
                            s["essay_comments"] = json.loads(s["essay_comments"])
                        except:
                            s["essay_comments"] = {}
                    
                    # ƒê·∫£m b·∫£o score l√† s·ªë
                    if isinstance(s.get("score"), str):
                        try:
                            s["score"] = int(s["score"])
                        except:
                            s["score"] = 0
                    
                    processed_submissions.append(s)
                    
                except Exception as e:
                    print(f"L·ªói x·ª≠ l√Ω submission ID {s.get('id', 'N/A')}: {str(e)}")
                    continue
            
            return processed_submissions
        else:
            print("‚ö†Ô∏è Kh√¥ng c√≥ submissions n√†o trong database")
            return []
        
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y all submissions: {str(e)}")
        traceback.print_exc()
        return []

def test_database_connection():
    """Ki·ªÉm tra k·∫øt n·ªëi database v√† c√°c b·∫£ng - H√ÄM M·ªöI"""
    try:
        supabase = get_supabase_client()
        if not supabase:
            return False, "Kh√¥ng th·ªÉ k·∫øt n·ªëi Supabase"
        
        # Test t·ª´ng b·∫£ng
        results = {}
        
        # Test b·∫£ng questions
        try:
            questions_result = supabase.table("questions").select("count", count="exact").execute()
            results["questions"] = questions_result.count
        except Exception as e:
            results["questions"] = f"L·ªói: {str(e)}"
        
        # Test b·∫£ng users
        try:
            users_result = supabase.table("users").select("count", count="exact").execute()
            results["users"] = users_result.count
        except Exception as e:
            results["users"] = f"L·ªói: {str(e)}"
        
        # Test b·∫£ng submissions
        try:
            submissions_result = supabase.table("submissions").select("count", count="exact").execute()
            results["submissions"] = submissions_result.count
        except Exception as e:
            results["submissions"] = f"L·ªói: {str(e)}"
        
        return True, results
        
    except Exception as e:
        return False, f"L·ªói k·∫øt n·ªëi: {str(e)}"

# ===============================
# C√ÅC H√ÄM HELPER
# ===============================

def format_timestamp(timestamp):
    """Format timestamp th√†nh chu·ªói ƒë·ªçc ƒë∆∞·ª£c"""
    if not timestamp:
        return "Kh√¥ng x√°c ƒë·ªãnh"
    
    try:
        if isinstance(timestamp, (int, float)):
            return datetime.fromtimestamp(timestamp).strftime("%d/%m/%Y %H:%M:%S")
        else:
            dt = datetime.fromisoformat(timestamp.replace("Z", "+00:00"))
            return dt.strftime("%d/%m/%Y %H:%M:%S")
    except:
        return "Kh√¥ng x√°c ƒë·ªãnh"

def get_correct_answers(question):
    """L·∫•y danh s√°ch ƒë√°p √°n ƒë√∫ng c·ªßa c√¢u h·ªèi"""
    try:
        q_correct = question.get("correct", [])
        q_answers = question.get("answers", [])
        
        if isinstance(q_correct, str):
            try:
                q_correct = json.loads(q_correct)
            except:
                try:
                    q_correct = [int(x.strip()) for x in q_correct.split(",")]
                except:
                    q_correct = []
        
        if isinstance(q_answers, str):
            try:
                q_answers = json.loads(q_answers)
            except:
                q_answers = [q_answers]
        
        return [q_answers[i - 1] for i in q_correct if 0 < i <= len(q_answers)]
        
    except (IndexError, TypeError):
        return ["L·ªói ƒë√°p √°n"]

def prepare_submission_data(submissions, students, questions, max_possible):
    """Chu·∫©n b·ªã d·ªØ li·ªáu submission cho b√°o c√°o"""
    all_submission_data = []
    
    for s in submissions:
        try:
            # T√¨m th√¥ng tin h·ªçc vi√™n
            student_info = next((student for student in students if student.get("email") == s.get("user_email")), None)
            full_name = student_info.get("full_name", "Kh√¥ng x√°c ƒë·ªãnh") if student_info else "Kh√¥ng x√°c ƒë·ªãnh"
            class_name = student_info.get("class", "Kh√¥ng x√°c ƒë·ªãnh") if student_info else "Kh√¥ng x√°c ƒë·ªãnh"
            
            # Chuy·ªÉn ƒë·ªïi timestamp sang ƒë·ªãnh d·∫°ng ƒë·ªçc ƒë∆∞·ª£c
            submission_time = format_timestamp(s.get("timestamp"))
            
            # Th√™m th√¥ng tin c∆° b·∫£n
            submission_data = {
                "ID": s.get("id", ""),
                "Email": s.get("user_email", ""),
                "H·ªç v√† t√™n": full_name,
                "L·ªõp": class_name,
                "Th·ªùi gian n·ªôp": submission_time,
                "ƒêi·ªÉm s·ªë": s.get("score", 0),
                "ƒêi·ªÉm t·ªëi ƒëa": max_possible,
                "T·ª∑ l·ªá ƒë√∫ng": f"{(s.get('score', 0)/max_possible*100):.1f}%" if max_possible > 0 else "N/A"
            }
            
            # Chuy·ªÉn ƒë·ªïi responses t·ª´ JSON string th√†nh dict n·∫øu c·∫ßn
            responses = s.get("responses", {})
            if isinstance(responses, str):
                try:
                    responses = json.loads(responses)
                except:
                    responses = {}
            
            # Th√™m c√¢u tr·∫£ l·ªùi c·ªßa t·ª´ng c√¢u h·ªèi
            for q in questions:
                q_id = str(q.get("id", ""))
                user_ans = responses.get(q_id, [])
                
                # Chu·∫©n b·ªã ƒë√°p √°n ƒë√∫ng
                expected_answers = get_correct_answers(q)
                is_correct = check_answer_correctness(user_ans, q)
                
                # Th√™m th√¥ng tin c√¢u h·ªèi
                submission_data[f"C√¢u {q_id}: {q.get('question', '')}"] = ", ".join([str(a) for a in user_ans]) if user_ans else "Kh√¥ng tr·∫£ l·ªùi"
                submission_data[f"C√¢u {q_id} - ƒê√∫ng/Sai"] = "ƒê√∫ng" if is_correct else "Sai"
            
            all_submission_data.append(submission_data)
            
        except Exception as e:
            print(f"L·ªói khi x·ª≠ l√Ω submission ID {s.get('id', '')}: {str(e)}")
            continue
    
    return all_submission_data

# ===============================
# C√ÅC H√ÄM HI·ªÇN TH·ªä TAB
# ===============================

def display_overview_tab(submissions=None, students=None, questions=None, max_possible=0):
    """Hi·ªÉn th·ªã tab t·ªïng quan"""
    if submissions is None:
        submissions = []
    if students is None:
        students = []
    if questions is None:
        questions = []
        
    st.subheader("üìä T·ªïng quan k·∫øt qu·∫£")
    
    # Ki·ªÉm tra d·ªØ li·ªáu
    if not submissions:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu b√†i n·ªôp ƒë·ªÉ hi·ªÉn th·ªã.")
        st.info("D·ªØ li·ªáu s·∫Ω xu·∫•t hi·ªán sau khi c√≥ h·ªçc vi√™n l√†m b√†i.")
        return
    
    if not students:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu h·ªçc vi√™n ƒë·ªÉ hi·ªÉn th·ªã.")
        return
    
    if not questions:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu c√¢u h·ªèi ƒë·ªÉ hi·ªÉn th·ªã.")
        return
    
    # Th·ªëng k√™ c∆° b·∫£n
    total_submissions = len(submissions)
    scores = [s.get("score", 0) for s in submissions]
    avg_score = sum(scores) / total_submissions if scores else 0
    max_score = max(scores) if scores else 0
    min_score = min(scores) if scores else 0
    
    # S·ªë h·ªçc vi√™n unique
    unique_students = len(set([s.get("user_email") for s in submissions]))
    
    # Hi·ªÉn th·ªã metrics
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üìù T·ªïng s·ªë b√†i n·ªôp", total_submissions)
        st.metric("üë• S·ªë h·ªçc vi√™n ƒë√£ l√†m", unique_students)
    
    with col2:
        st.metric("üìä ƒêi·ªÉm trung b√¨nh", f"{avg_score:.1f}/{max_possible}")
        st.metric("üèÜ ƒêi·ªÉm cao nh·∫•t", f"{max_score}/{max_possible}")
    
    with col3:
        st.metric("üìâ ƒêi·ªÉm th·∫•p nh·∫•t", f"{min_score}/{max_possible}")
        st.metric("üìã S·ªë c√¢u h·ªèi", len(questions))
    
    with col4:
        avg_percent = (avg_score / max_possible * 100) if max_possible > 0 else 0
        st.metric("üìà T·ª∑ l·ªá ƒë√∫ng TB", f"{avg_percent:.1f}%")
        st.metric("üë®‚Äçüéì T·ªïng s·ªë h·ªçc vi√™n", len(students))
    
    # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi ƒëi·ªÉm s·ªë
    st.subheader("üìà Ph√¢n ph·ªëi ƒëi·ªÉm s·ªë")
    
    if scores:
        try:
            fig, ax = plt.subplots(figsize=(10, 6))
            
            # T·∫°o histogram v·ªõi bins ph√π h·ª£p
            n_bins = min(10, len(set(scores)))  # T·ªëi ƒëa 10 bins
            ax.hist(scores, bins=n_bins, alpha=0.7, color='skyblue', edgecolor='black')
            
            # Th√™m ƒë∆∞·ªùng trung b√¨nh
            ax.axvline(avg_score, color='red', linestyle='--', 
                      label=f'Trung b√¨nh: {avg_score:.1f}')
            
            ax.set_xlabel("ƒêi·ªÉm s·ªë")
            ax.set_ylabel("S·ªë l∆∞·ª£ng b√†i n·ªôp")
            ax.set_title("Ph√¢n ph·ªëi ƒëi·ªÉm s·ªë c√°c b√†i n·ªôp")
            ax.legend()
            ax.grid(True, alpha=0.3)
            
            plt.tight_layout()
            st.pyplot(fig)
            
        except Exception as e:
            st.error(f"L·ªói khi v·∫Ω bi·ªÉu ƒë·ªì: {str(e)}")
    
    # Th·ªëng k√™ theo th·ªùi gian
    st.subheader("üìÖ Ho·∫°t ƒë·ªông theo th·ªùi gian")
    
    try:
        # Chu·∫©n b·ªã d·ªØ li·ªáu th·ªùi gian
        time_data = []
        for s in submissions:
            timestamp = s.get("timestamp")
            if timestamp:
                try:
                    if isinstance(timestamp, (int, float)):
                        submit_time = datetime.fromtimestamp(timestamp)
                    else:
                        submit_time = datetime.fromisoformat(timestamp.replace("Z", "+00:00"))
                    
                    time_data.append({
                        "date": submit_time.date(),
                        "score": s.get("score", 0)
                    })
                except:
                    continue
        
        if time_data:
            df_time = pd.DataFrame(time_data)
            
            # Nh√≥m theo ng√†y
            daily_stats = df_time.groupby('date').agg({
                'score': ['count', 'mean', 'max', 'min']
            }).round(2)
            
            daily_stats.columns = ['S·ªë b√†i n·ªôp', 'ƒêi·ªÉm TB', 'ƒêi·ªÉm cao nh·∫•t', 'ƒêi·ªÉm th·∫•p nh·∫•t']
            
            st.dataframe(daily_stats, use_container_width=True)
            
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu th·ªùi gian h·ª£p l·ªá ƒë·ªÉ hi·ªÉn th·ªã.")
            
    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu th·ªùi gian: {str(e)}")

def display_student_tab(submissions=None, students=None, questions=None, max_possible=0):
    """Hi·ªÉn th·ªã tab theo h·ªçc vi√™n"""
    if submissions is None:
        submissions = []
    if students is None:
        students = []
    if questions is None:
        questions = []
        
    st.subheader("üë• Chi ti·∫øt theo h·ªçc vi√™n")
    
    # Ki·ªÉm tra d·ªØ li·ªáu
    if not submissions:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu b√†i n·ªôp ƒë·ªÉ hi·ªÉn th·ªã.")
        return
    
    if not students:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu h·ªçc vi√™n ƒë·ªÉ hi·ªÉn th·ªã.")
        return
    
    # T·∫°o DataFrame t·ª´ d·ªØ li·ªáu
    user_data = []
    for s in submissions:
        try:
            # T√¨m th√¥ng tin h·ªçc vi√™n
            student_info = next((student for student in students if student.get("email") == s.get("user_email")), None)
            full_name = student_info.get("full_name", "Kh√¥ng x√°c ƒë·ªãnh") if student_info else "Kh√¥ng x√°c ƒë·ªãnh"
            class_name = student_info.get("class", "Kh√¥ng x√°c ƒë·ªãnh") if student_info else "Kh√¥ng x√°c ƒë·ªãnh"
            
            # X·ª≠ l√Ω timestamp
            submission_time = format_timestamp(s.get("timestamp"))
            
            user_data.append({
                "email": s.get("user_email", ""),
                "full_name": full_name,
                "class": class_name,
                "submission_id": s.get("id", ""),
                "timestamp": submission_time,
                "score": s.get("score", 0),
                "max_score": max_possible,
                "percent": f"{(s.get('score', 0)/max_possible*100):.1f}%" if max_possible > 0 else "N/A"
            })
        except Exception as e:
            st.error(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu h·ªçc vi√™n: {str(e)}")
            continue
    
    if not user_data:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ hi·ªÉn th·ªã.")
        return
    
    df_users = pd.DataFrame(user_data)
    
    # L·ªçc theo email ho·∫∑c l·ªõp v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø
    col1, col2 = st.columns(2)
    
    with col1:
        # L·∫•y danh s√°ch email unique
        unique_emails = sorted(list(set([u.get("email", "") for u in user_data if u.get("email")])))
        user_filter = st.selectbox(
            "Ch·ªçn h·ªçc vi√™n ƒë·ªÉ xem chi ti·∫øt:",
            options=["T·∫•t c·∫£"] + unique_emails,
            key="user_filter_tab2"
        )
    
    with col2:
        # L·∫•y danh s√°ch l·ªõp unique (lo·∫°i b·ªè "Kh√¥ng x√°c ƒë·ªãnh")
        unique_classes = sorted(list(set([u.get("class", "") for u in user_data 
                                        if u.get("class") and u.get("class") != "Kh√¥ng x√°c ƒë·ªãnh"])))
        class_filter = st.selectbox(
            "L·ªçc theo l·ªõp:",
            options=["T·∫•t c·∫£"] + unique_classes,
            key="class_filter_tab2"
        )
    
    # √Åp d·ª•ng b·ªô l·ªçc
    df_filtered = df_users.copy()
    
    if user_filter != "T·∫•t c·∫£":
        df_filtered = df_filtered[df_filtered["email"] == user_filter]
    
    if class_filter != "T·∫•t c·∫£":
        df_filtered = df_filtered[df_filtered["class"] == class_filter]
    
    # Hi·ªÉn th·ªã s·ªë li·ªáu th·ªëng k√™
    st.write(f"üìä **Hi·ªÉn th·ªã {len(df_filtered)} / {len(df_users)} b√†i n·ªôp**")
    
    # Hi·ªÉn th·ªã b·∫£ng
    if not df_filtered.empty:
        st.dataframe(
            df_filtered.sort_values(by="timestamp", ascending=False),
            use_container_width=True,
            hide_index=True
        )
        
        # Xem chi ti·∫øt m·ªôt b√†i n·ªôp c·ª• th·ªÉ
        if user_filter != "T·∫•t c·∫£":
            submission_ids = df_filtered["submission_id"].tolist()
            if submission_ids:
                selected_submission = st.selectbox(
                    "Ch·ªçn b√†i n·ªôp ƒë·ªÉ xem chi ti·∫øt:",
                    options=submission_ids,
                    key="submission_id_select"
                )
                
                # Hi·ªÉn th·ªã chi ti·∫øt b√†i n·ªôp
                display_submission_details(selected_submission, submissions, questions, max_possible)
    else:
        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi b·ªô l·ªçc ƒë√£ ch·ªçn.")

def display_question_tab(submissions=None, questions=None):
    """Hi·ªÉn th·ªã tab ph√¢n t√≠ch c√¢u h·ªèi - ƒê√É S·ª¨A L·ªñI HI·ªÇN TH·ªä"""
    if submissions is None:
        submissions = []
    if questions is None:
        questions = []
        
    st.subheader("‚ùì Ph√¢n t√≠ch theo c√¢u h·ªèi")
    
    if not questions:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ c√¢u h·ªèi ƒë·ªÉ ph√¢n t√≠ch.")
        return pd.DataFrame()
    
    if not submissions:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ b√†i n·ªôp ƒë·ªÉ ph√¢n t√≠ch.")
        return pd.DataFrame()
    
    # Th·ªëng k√™ t·ª∑ l·ªá ƒë√∫ng/sai cho t·ª´ng c√¢u h·ªèi
    question_stats = {}
    
    for q in questions:
        q_id = str(q.get("id", ""))
        correct_count = 0
        wrong_count = 0
        skip_count = 0
        
        for s in submissions:
            # ƒê·∫£m b·∫£o responses ƒë√∫ng ƒë·ªãnh d·∫°ng
            responses = s.get("responses", {})
            if isinstance(responses, str):
                try:
                    responses = json.loads(responses)
                except:
                    responses = {}
            
            user_ans = responses.get(q_id, [])
            
            if not user_ans:
                skip_count += 1
            elif check_answer_correctness(user_ans, q):
                correct_count += 1
            else:
                wrong_count += 1
        
        question_stats[q_id] = {
            "question": q.get("question", ""),
            "type": q.get("type", ""),
            "correct": correct_count,
            "wrong": wrong_count,
            "skip": skip_count,
            "total": correct_count + wrong_count + skip_count,
            "correct_rate": correct_count / (correct_count + wrong_count + skip_count) if (correct_count + wrong_count + skip_count) > 0 else 0
        }
    
    # DataFrame th·ªëng k√™ c√¢u h·ªèi - ƒê√É S·ª¨A HI·ªÇN TH·ªä
    df_questions_data = [
        {
            "ID": q_id,
            "N·ªôi dung c√¢u h·ªèi": stats["question"],
            "Lo·∫°i": stats["type"],
            "ƒê√∫ng": stats["correct"],
            "Sai": stats["wrong"],
            "B·ªè qua": stats["skip"],
            "T·ªïng": stats["total"],
            "T·ª∑ l·ªá ƒë√∫ng (%)": f"{stats['correct_rate']*100:.1f}%"
        }
        for q_id, stats in question_stats.items()
    ]
    
    if not df_questions_data:
        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu c√¢u h·ªèi ƒë·ªÉ ph√¢n t√≠ch.")
        return pd.DataFrame()
    
    df_questions = pd.DataFrame(df_questions_data)
    
    # T·∫°o b·ªô l·ªçc lo·∫°i c√¢u h·ªèi
    question_types = ["T·∫•t c·∫£", "Checkbox", "Combobox", "Essay"]
    selected_type = st.selectbox("L·ªçc theo lo·∫°i c√¢u h·ªèi:", question_types, key="filter_question_type_tab3")
    
    # √Åp d·ª•ng b·ªô l·ªçc
    filtered_df = df_questions
    if selected_type != "T·∫•t c·∫£":
        filtered_df = df_questions[df_questions["Lo·∫°i"] == selected_type]
    
    # ‚úÖ S·ª¨A L·ªñI HI·ªÇN TH·ªä: S·ª≠ d·ª•ng st.data_editor v·ªõi c·∫•u h√¨nh t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh
    st.write(f"üìä **Hi·ªÉn th·ªã {len(filtered_df)} / {len(df_questions)} c√¢u h·ªèi**")
    
    # C·∫•u h√¨nh hi·ªÉn th·ªã c·ªôt
    column_config = {
        "ID": st.column_config.NumberColumn("ID", width="small"),
        "N·ªôi dung c√¢u h·ªèi": st.column_config.TextColumn(
            "N·ªôi dung c√¢u h·ªèi",
            width="large",
            help="N·ªôi dung ƒë·∫ßy ƒë·ªß c·ªßa c√¢u h·ªèi"
        ),
        "Lo·∫°i": st.column_config.TextColumn("Lo·∫°i", width="small"),
        "ƒê√∫ng": st.column_config.NumberColumn("ƒê√∫ng", width="small"),
        "Sai": st.column_config.NumberColumn("Sai", width="small"),
        "B·ªè qua": st.column_config.NumberColumn("B·ªè qua", width="small"),
        "T·ªïng": st.column_config.NumberColumn("T·ªïng", width="small"),
        "T·ª∑ l·ªá ƒë√∫ng (%)": st.column_config.TextColumn("T·ª∑ l·ªá ƒë√∫ng (%)", width="medium")
    }
    
    # Hi·ªÉn th·ªã b·∫£ng v·ªõi kh·∫£ nƒÉng m·ªü r·ªông
    st.data_editor(
        filtered_df,
        use_container_width=True,
        hide_index=True,
        disabled=True,  # Ch·ªâ xem, kh√¥ng ch·ªânh s·ª≠a
        column_config=column_config,
        height=600  # TƒÉng chi·ªÅu cao ƒë·ªÉ hi·ªÉn th·ªã nhi·ªÅu d·ªØ li·ªáu h∆°n
    )
    
    # Th√™m chi ti·∫øt cho t·ª´ng c√¢u h·ªèi
    st.subheader("üìã Chi ti·∫øt t·ª´ng c√¢u h·ªèi")
    
    # Dropdown ƒë·ªÉ ch·ªçn c√¢u h·ªèi c·ª• th·ªÉ
    question_options = {f"C√¢u {q_id}: {stats['question'][:50]}...": q_id 
                       for q_id, stats in question_stats.items()}
    
    if question_options:
        selected_question = st.selectbox(
            "Ch·ªçn c√¢u h·ªèi ƒë·ªÉ xem chi ti·∫øt:",
            options=list(question_options.keys()),
            key="select_question_detail"
        )
        
        if selected_question:
            q_id = question_options[selected_question]
            stats = question_stats[q_id]
            
            # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("‚úÖ Tr·∫£ l·ªùi ƒë√∫ng", stats["correct"])
            with col2:
                st.metric("‚ùå Tr·∫£ l·ªùi sai", stats["wrong"])
            with col3:
                st.metric("‚è≠Ô∏è B·ªè qua", stats["skip"])
            with col4:
                st.metric("üìä T·ª∑ l·ªá ƒë√∫ng", f"{stats['correct_rate']*100:.1f}%")
            
            # T√¨m c√¢u h·ªèi g·ªëc ƒë·ªÉ hi·ªÉn th·ªã ƒë√°p √°n ƒë√∫ng
            original_question = next((q for q in questions if str(q.get("id")) == q_id), None)
            
            if original_question:
                st.write("**üìù N·ªôi dung c√¢u h·ªèi:**")
                st.write(original_question.get("question", ""))
                
                if original_question.get("type") != "Essay":
                    st.write("**‚úÖ ƒê√°p √°n ƒë√∫ng:**")
                    correct_answers = get_correct_answers(original_question)
                    for ans in correct_answers:
                        st.write(f"- {ans}")
    
    return df_questions

def display_student_list_tab(submissions=None, students=None, max_possible=0):
    """Hi·ªÉn th·ªã tab danh s√°ch h·ªçc vi√™n"""
    if submissions is None:
        submissions = []
    if students is None:
        students = []
        
    st.subheader("üìã Danh s√°ch h·ªçc vi√™n")
    
    # Ki·ªÉm tra d·ªØ li·ªáu
    if not students:
        st.warning("‚ö†Ô∏è Ch∆∞a c√≥ h·ªçc vi√™n n√†o ƒëƒÉng k√Ω trong h·ªá th·ªëng.")
        st.info("H·ªçc vi√™n s·∫Ω xu·∫•t hi·ªán sau khi ƒëƒÉng k√Ω t√†i kho·∫£n.")
        return pd.DataFrame(), pd.DataFrame()
    
    # Chu·∫©n b·ªã d·ªØ li·ªáu
    student_data = []
    for student in students:
        try:
            # T√¨m t·∫•t c·∫£ b√†i n·ªôp c·ªßa h·ªçc vi√™n
            student_email = student.get("email", "")
            student_submissions = [s for s in submissions if s.get("user_email") == student_email]
            submission_count = len(student_submissions)
            
            # T√¨m ƒëi·ªÉm cao nh·∫•t
            max_student_score = max([s.get("score", 0) for s in student_submissions]) if student_submissions else 0
            
            # Th·ªùi gian ƒëƒÉng k√Ω
            registration_date = format_timestamp(student.get("registration_date"))
            
            student_data.append({
                "full_name": student.get("full_name", ""),
                "email": student_email,
                "class": student.get("class", ""),
                "registration_date": registration_date,
                "submission_count": submission_count,
                "max_score": max_student_score,
                "max_possible": max_possible,
                "percent": f"{(max_student_score/max_possible*100):.1f}%" if max_possible > 0 else "N/A"
            })
        except Exception as e:
            st.error(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu h·ªçc vi√™n {student.get('email', '')}: {str(e)}")
            continue
    
    if not student_data:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu h·ªçc vi√™n h·ª£p l·ªá.")
        return pd.DataFrame(), pd.DataFrame()
    
    # DataFrame cho danh s√°ch h·ªçc vi√™n
    df_students_list = pd.DataFrame([
        {
            "H·ªç v√† t√™n": s["full_name"],
            "Email": s["email"],
            "L·ªõp": s["class"],
            "Ng√†y ƒëƒÉng k√Ω": s["registration_date"],
            "S·ªë l·∫ßn l√†m b√†i": s["submission_count"],
            "ƒêi·ªÉm cao nh·∫•t": s["max_score"],
            "ƒêi·ªÉm t·ªëi ƒëa": s["max_possible"],
            "T·ª∑ l·ªá ƒë√∫ng": s["percent"]
        } for s in student_data
    ])
    
    # L·ªçc theo l·ªõp v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø
    unique_classes = sorted(list(set([s["class"] for s in student_data 
                                    if s["class"] and s["class"].strip()])))
    
    class_filter = st.selectbox(
        "L·ªçc theo l·ªõp:",
        options=["T·∫•t c·∫£"] + unique_classes,
        key="class_filter_tab4"
    )
    
    # √Åp d·ª•ng b·ªô l·ªçc
    df_students = pd.DataFrame(student_data)
    
    if class_filter != "T·∫•t c·∫£":
        df_students = df_students[df_students["class"] == class_filter]
    
    # S·∫Øp x·∫øp theo t√™n
    df_students = df_students.sort_values(by="full_name")
    
    # Hi·ªÉn th·ªã s·ªë li·ªáu
    st.write(f"üìä **Hi·ªÉn th·ªã {len(df_students)} / {len(student_data)} h·ªçc vi√™n**")
    
    # Hi·ªÉn th·ªã b·∫£ng
    if not df_students.empty:
        display_columns = ["full_name", "email", "class", "registration_date", 
                          "submission_count", "max_score", "percent"]
        
        display_df = df_students[display_columns].copy()
        display_df.columns = ["H·ªç v√† t√™n", "Email", "L·ªõp", "Ng√†y ƒëƒÉng k√Ω", 
                             "S·ªë l·∫ßn l√†m", "ƒêi·ªÉm cao nh·∫•t", "T·ª∑ l·ªá ƒë√∫ng"]
        
        st.dataframe(display_df, use_container_width=True, hide_index=True)
        
        # Th·ªëng k√™ theo l·ªõp
        st.subheader("üìä Th·ªëng k√™ theo l·ªõp")
        
        class_stats = df_students.groupby("class").agg({
            "email": "count",
            "submission_count": "sum",
            "max_score": "mean"
        }).reset_index()
        
        class_stats.columns = ["L·ªõp", "S·ªë h·ªçc vi√™n", "T·ªïng s·ªë b√†i n·ªôp", "ƒêi·ªÉm trung b√¨nh"]
        class_stats["ƒêi·ªÉm trung b√¨nh"] = class_stats["ƒêi·ªÉm trung b√¨nh"].round(2)
        
        df_class_stats = class_stats.copy()
        
        st.dataframe(class_stats, use_container_width=True, hide_index=True)
        
        return df_students_list, df_class_stats
    else:
        st.info("Kh√¥ng c√≥ h·ªçc vi√™n n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc ƒë√£ ch·ªçn.")
        return pd.DataFrame(), pd.DataFrame()

def display_export_tab(df_all_submissions=None, df_questions=None, df_students_list=None, df_class_stats=None):
    """Hi·ªÉn th·ªã tab xu·∫•t b√°o c√°o - ƒê√É B·ªî SUNG CH·ª®C NƒÇNG XU·∫§T FILE"""
    if df_all_submissions is None:
        df_all_submissions = pd.DataFrame()
    if df_questions is None:
        df_questions = pd.DataFrame()
    if df_students_list is None:
        df_students_list = pd.DataFrame()
    if df_class_stats is None:
        df_class_stats = pd.DataFrame()
        
    st.subheader("üì§ Xu·∫•t b√°o c√°o")
    
    # L·∫•y d·ªØ li·ªáu c·∫ßn thi·∫øt
    questions = get_all_questions()
    students = get_all_users(role="student")
    submissions = get_all_submissions()
    max_possible = sum([q.get("score", 0) for q in questions])
    
    # Th√™m tab cho c√°c lo·∫°i b√°o c√°o kh√°c nhau
    report_tab1, report_tab2, report_tab3 = st.tabs([
        "üìä B√°o c√°o t·ªïng h·ª£p", 
        "üë§ B√°o c√°o theo h·ªçc vi√™n",
        "üéì B√°o c√°o theo l·ªõp"
    ])
    
    with report_tab1:
        st.write("### üìä B√°o c√°o t·ªïng h·ª£p h·ªá th·ªëng")
        
        if not submissions or not students or not questions:
            st.warning("‚ö†Ô∏è Ch∆∞a c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ xu·∫•t b√°o c√°o t·ªïng h·ª£p.")
            st.info("C·∫ßn c√≥ √≠t nh·∫•t: 1 c√¢u h·ªèi, 1 h·ªçc vi√™n v√† 1 b√†i n·ªôp.")
            return
        
        st.success(f"‚úÖ S·∫µn s√†ng xu·∫•t b√°o c√°o t·ªïng h·ª£p:")
        st.write(f"- üìù **C√¢u h·ªèi:** {len(questions)}")
        st.write(f"- üë• **H·ªçc vi√™n:** {len(students)}")
        st.write(f"- üìã **B√†i n·ªôp:** {len(submissions)}")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üìÑ Xu·∫•t b√°o c√°o t·ªïng h·ª£p (DOCX)", 
                        type="primary", use_container_width=True):
                with st.spinner("üîÑ ƒêang t·∫°o b√°o c√°o DOCX..."):
                    try:
                        buffer = create_overall_report(submissions, students, questions, max_possible)
                        
                        if buffer.getvalue():
                            filename = f"bao_cao_tong_hop_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx"
                            
                            st.download_button(
                                label="üì• T·∫£i xu·ªëng b√°o c√°o DOCX",
                                data=buffer.getvalue(),
                                file_name=filename,
                                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                use_container_width=True
                            )
                            st.success("‚úÖ B√°o c√°o DOCX ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                        else:
                            st.error("‚ùå Kh√¥ng th·ªÉ t·∫°o b√°o c√°o DOCX. Vui l√≤ng th·ª≠ l·∫°i.")
                    except Exception as e:
                        st.error(f"‚ùå L·ªói khi t·∫°o b√°o c√°o: {str(e)}")
        
        with col2:
            if st.button("üìë Xu·∫•t b√°o c√°o t·ªïng h·ª£p (PDF)", 
                        type="secondary", use_container_width=True):
                with st.spinner("üîÑ ƒêang t·∫°o b√°o c√°o PDF..."):
                    try:
                        # T·∫°o DataFrame t·ªïng h·ª£p cho PDF
                        summary_data = []
                        for s in submissions:
                            student_info = next((st for st in students if st.get("email") == s.get("user_email")), None)
                            summary_data.append({
                                "H·ªç t√™n": student_info.get("full_name", "N/A") if student_info else "N/A",
                                "L·ªõp": student_info.get("class", "N/A") if student_info else "N/A",
                                "Email": s.get("user_email", ""),
                                "Th·ªùi gian": format_timestamp(s.get("timestamp")),
                                "ƒêi·ªÉm": f"{s.get('score', 0)}/{max_possible}",
                                "T·ª∑ l·ªá": f"{(s.get('score', 0)/max_possible*100):.1f}%" if max_possible > 0 else "N/A"
                            })
                        
                        df_summary = pd.DataFrame(summary_data)
                        buffer = dataframe_to_pdf_fpdf(df_summary, "B√°o c√°o t·ªïng h·ª£p h·ªá th·ªëng", "bao_cao_tong_hop")
                        
                        if buffer.getvalue():
                            filename = f"bao_cao_tong_hop_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
                            
                            st.download_button(
                                label="üì• T·∫£i xu·ªëng b√°o c√°o PDF",
                                data=buffer.getvalue(),
                                file_name=filename,
                                mime="application/pdf",
                                use_container_width=True
                            )
                            st.success("‚úÖ B√°o c√°o PDF ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                        else:
                            st.error("‚ùå Kh√¥ng th·ªÉ t·∫°o b√°o c√°o PDF. Vui l√≤ng th·ª≠ l·∫°i.")
                    except Exception as e:
                        st.error(f"‚ùå L·ªói khi t·∫°o b√°o c√°o: {str(e)}")
        
        # Xu·∫•t Excel t·ªïng h·ª£p
        st.divider()
        if st.button("üìä Xu·∫•t t·∫•t c·∫£ d·ªØ li·ªáu (Excel)", use_container_width=True):
            with st.spinner("üîÑ ƒêang t·∫°o file Excel..."):
                try:
                    # Chu·∫©n b·ªã nhi·ªÅu sheet
                    sheets_data = []
                    sheet_names = []
                    
                    # Sheet 1: T·∫•t c·∫£ b√†i n·ªôp
                    if not df_all_submissions.empty:
                        sheets_data.append(df_all_submissions)
                        sheet_names.append("T·∫•t c·∫£ b√†i n·ªôp")
                    
                    # Sheet 2: Danh s√°ch h·ªçc vi√™n
                    if not df_students_list.empty:
                        sheets_data.append(df_students_list)
                        sheet_names.append("Danh s√°ch h·ªçc vi√™n")
                    
                    # Sheet 3: Th·ªëng k√™ c√¢u h·ªèi
                    if not df_questions.empty:
                        sheets_data.append(df_questions)
                        sheet_names.append("Th·ªëng k√™ c√¢u h·ªèi")
                    
                    # Sheet 4: Th·ªëng k√™ l·ªõp
                    if not df_class_stats.empty:
                        sheets_data.append(df_class_stats)
                        sheet_names.append("Th·ªëng k√™ l·ªõp")
                    
                    if sheets_data:
                        filename = f"bao_cao_tong_hop_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
                        excel_link = export_to_excel(sheets_data, sheet_names, filename)
                        st.markdown(excel_link, unsafe_allow_html=True)
                        st.success("‚úÖ File Excel ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                    else:
                        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t Excel.")
                        
                except Exception as e:
                    st.error(f"‚ùå L·ªói khi t·∫°o file Excel: {str(e)}")
    
    with report_tab2:
        st.write("### üë§ B√°o c√°o chi ti·∫øt theo t·ª´ng h·ªçc vi√™n")
        
        if not students:
            st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu h·ªçc vi√™n ƒë·ªÉ hi·ªÉn th·ªã.")
            return
        
        # Dropdown ch·ªçn h·ªçc vi√™n
        student_emails = [student.get("email", "") for student in students if student.get("email")]
        student_emails = sorted(list(set(student_emails)))
        
        if not student_emails:
            st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y email h·ªçc vi√™n h·ª£p l·ªá.")
            return
        
        selected_email = st.selectbox(
            "Ch·ªçn email h·ªçc vi√™n:",
            options=student_emails,
            key="export_student_select"
        )
        
        if selected_email:
            # Hi·ªÉn th·ªã th√¥ng tin h·ªçc vi√™n
            student_info = next((s for s in students if s.get("email") == selected_email), None)
            
            if student_info:
                col1, col2 = st.columns(2)
                with col1:
                    st.write(f"**üë§ H·ªç t√™n:** {student_info.get('full_name', 'N/A')}")
                    st.write(f"**üìß Email:** {student_info.get('email', 'N/A')}")
                with col2:
                    st.write(f"**üéì L·ªõp:** {student_info.get('class', 'N/A')}")
                    st.write(f"**üë• Vai tr√≤:** {student_info.get('role', 'N/A')}")
                
                # L·∫•y b√†i n·ªôp c·ªßa h·ªçc vi√™n
                student_submissions = get_user_submissions(selected_email)
                
                if student_submissions:
                    st.success(f"üìã T√¨m th·∫•y {len(student_submissions)} b√†i l√†m c·ªßa h·ªçc vi√™n n√†y")
                    
                    # Ch·ªçn b√†i n·ªôp c·ª• th·ªÉ
                    if len(student_submissions) > 1:
                        submission_options = {}
                        for i, sub in enumerate(student_submissions):
                            timestamp = format_timestamp(sub.get("timestamp"))
                            score = sub.get("score", 0)
                            submission_options[f"B√†i {i+1}: {timestamp} - ƒêi·ªÉm: {score}"] = sub
                        
                        selected_submission_name = st.selectbox(
                            "Ch·ªçn b√†i l√†m ƒë·ªÉ xu·∫•t b√°o c√°o:",
                            options=list(submission_options.keys()),
                            key="select_submission_export"
                        )
                        selected_submission = submission_options[selected_submission_name]
                    else:
                        selected_submission = student_submissions[0]
                        timestamp = format_timestamp(selected_submission.get("timestamp"))
                        score = selected_submission.get("score", 0)
                        st.info(f"üìù S·∫Ω xu·∫•t b√°o c√°o cho b√†i l√†m: {timestamp} - ƒêi·ªÉm: {score}")
                    
                    # N√∫t xu·∫•t b√°o c√°o
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        if st.button("üìÑ Xu·∫•t b√°o c√°o h·ªçc vi√™n (DOCX)", 
                                    type="primary", use_container_width=True):
                            with st.spinner("üîÑ ƒêang t·∫°o b√°o c√°o DOCX..."):
                                try:
                                    buffer = create_student_report_docx(
                                        student_info.get("full_name", ""),
                                        student_info.get("email", ""),
                                        student_info.get("class", ""),
                                        selected_submission,
                                        questions,
                                        max_possible
                                    )
                                    
                                    if buffer.getvalue():
                                        filename = f"bao_cao_{student_info.get('full_name', 'hoc_vien')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx"
                                        
                                        st.download_button(
                                            label="üì• T·∫£i xu·ªëng b√°o c√°o DOCX",
                                            data=buffer.getvalue(),
                                            file_name=filename,
                                            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                            use_container_width=True
                                        )
                                        st.success("‚úÖ B√°o c√°o DOCX ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                                    else:
                                        st.error("‚ùå Kh√¥ng th·ªÉ t·∫°o b√°o c√°o DOCX.")
                                except Exception as e:
                                    st.error(f"‚ùå L·ªói khi t·∫°o b√°o c√°o: {str(e)}")
                    
                    with col2:
                        if st.button("üìë Xu·∫•t b√°o c√°o h·ªçc vi√™n (PDF)", 
                                    type="secondary", use_container_width=True):
                            with st.spinner("üîÑ ƒêang t·∫°o b√°o c√°o PDF..."):
                                try:
                                    buffer = create_student_report_pdf_fpdf(
                                        student_info.get("full_name", ""),
                                        student_info.get("email", ""),
                                        student_info.get("class", ""),
                                        selected_submission,
                                        questions,
                                        max_possible
                                    )
                                    
                                    if buffer.getvalue():
                                        filename = f"bao_cao_{student_info.get('full_name', 'hoc_vien')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
                                        
                                        st.download_button(
                                            label="üì• T·∫£i xu·ªëng b√°o c√°o PDF",
                                            data=buffer.getvalue(),
                                            file_name=filename,
                                            mime="application/pdf",
                                            use_container_width=True
                                        )
                                        st.success("‚úÖ B√°o c√°o PDF ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                                    else:
                                        st.error("‚ùå Kh√¥ng th·ªÉ t·∫°o b√°o c√°o PDF.")
                                except Exception as e:
                                    st.error(f"‚ùå L·ªói khi t·∫°o b√°o c√°o: {str(e)}")
                else:
                    st.warning(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y b√†i n·ªôp n√†o c·ªßa h·ªçc vi√™n {selected_email}")
                    st.info("H·ªçc vi√™n c·∫ßn ho√†n th√†nh √≠t nh·∫•t m·ªôt b√†i kh·∫£o s√°t ƒë·ªÉ c√≥ th·ªÉ xu·∫•t b√°o c√°o.")
    
    with report_tab3:
        st.write("### üéì B√°o c√°o chi ti·∫øt theo l·ªõp")
        
        if not students:
            st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu h·ªçc vi√™n ƒë·ªÉ hi·ªÉn th·ªã.")
            return
        
        # L·∫•y danh s√°ch l·ªõp
        classes = sorted(list(set([s.get("class", "") for s in students 
                                 if s.get("class") and s.get("class").strip()])))
        
        if not classes:
            st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin l·ªõp h·ª£p l·ªá.")
            return
        
        selected_class = st.selectbox(
            "Ch·ªçn l·ªõp ƒë·ªÉ xu·∫•t b√°o c√°o:",
            options=classes,
            key="export_class_select"
        )
        
        if selected_class:
            # Hi·ªÉn th·ªã th√¥ng tin l·ªõp
            class_students = [s for s in students if s.get("class") == selected_class]
            class_submissions = [s for s in submissions 
                               if any(st.get("email") == s.get("user_email") for st in class_students)]
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("üë• T·ªïng s·ªë h·ªçc vi√™n", len(class_students))
            with col2:
                st.metric("üìã T·ªïng s·ªë b√†i n·ªôp", len(class_submissions))
            with col3:
                avg_score = sum(s.get("score", 0) for s in class_submissions) / len(class_submissions) if class_submissions else 0
                st.metric("üìä ƒêi·ªÉm trung b√¨nh", f"{avg_score:.1f}/{max_possible}")
            
            if class_submissions:
                # N√∫t xu·∫•t b√°o c√°o l·ªõp
                col1, col2 = st.columns(2)
                
                with col1:
                    if st.button("üìÑ Xu·∫•t b√°o c√°o l·ªõp (DOCX)", 
                                type="primary", use_container_width=True):
                        with st.spinner("üîÑ ƒêang t·∫°o b√°o c√°o l·ªõp DOCX..."):
                            try:
                                buffer = create_class_report(
                                    selected_class,
                                    class_submissions,
                                    class_students,
                                    questions,
                                    max_possible
                                )
                                
                                if buffer.getvalue():
                                    filename = f"bao_cao_lop_{selected_class}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx"
                                    
                                    st.download_button(
                                        label="üì• T·∫£i xu·ªëng b√°o c√°o l·ªõp DOCX",
                                        data=buffer.getvalue(),
                                        file_name=filename,
                                        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                        use_container_width=True
                                    )
                                    st.success("‚úÖ B√°o c√°o l·ªõp DOCX ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                                else:
                                    st.error("‚ùå Kh√¥ng th·ªÉ t·∫°o b√°o c√°o l·ªõp DOCX.")
                            except Exception as e:
                                st.error(f"‚ùå L·ªói khi t·∫°o b√°o c√°o: {str(e)}")
                
                with col2:
                    if st.button("üìë Xu·∫•t b√°o c√°o l·ªõp (PDF)", 
                                type="secondary", use_container_width=True):
                        with st.spinner("üîÑ ƒêang t·∫°o b√°o c√°o l·ªõp PDF..."):
                            try:
                                # T·∫°o DataFrame cho b√°o c√°o l·ªõp
                                class_data = []
                                for submission in class_submissions:
                                    student_info = next((s for s in class_students 
                                                       if s.get("email") == submission.get("user_email")), None)
                                    class_data.append({
                                        "H·ªç t√™n": student_info.get("full_name", "N/A") if student_info else "N/A",
                                        "Email": submission.get("user_email", ""),
                                        "Th·ªùi gian n·ªôp": format_timestamp(submission.get("timestamp")),
                                        "ƒêi·ªÉm s·ªë": f"{submission.get('score', 0)}/{max_possible}",
                                        "T·ª∑ l·ªá": f"{(submission.get('score', 0)/max_possible*100):.1f}%" if max_possible > 0 else "N/A"
                                    })
                                
                                df_class = pd.DataFrame(class_data)
                                buffer = dataframe_to_pdf_fpdf(
                                    df_class, 
                                    f"B√°o c√°o l·ªõp {selected_class}", 
                                    f"bao_cao_lop_{selected_class}"
                                )
                                
                                if buffer.getvalue():
                                    filename = f"bao_cao_lop_{selected_class}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
                                    
                                    st.download_button(
                                        label="üì• T·∫£i xu·ªëng b√°o c√°o l·ªõp PDF",
                                        data=buffer.getvalue(),
                                        file_name=filename,
                                        mime="application/pdf",
                                        use_container_width=True
                                    )
                                    st.success("‚úÖ B√°o c√°o l·ªõp PDF ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                                else:
                                    st.error("‚ùå Kh√¥ng th·ªÉ t·∫°o b√°o c√°o l·ªõp PDF.")
                            except Exception as e:
                                st.error(f"‚ùå L·ªói khi t·∫°o b√°o c√°o: {str(e)}")
            else:
                st.warning(f"‚ö†Ô∏è L·ªõp {selected_class} ch∆∞a c√≥ b√†i n·ªôp n√†o.")
                st.info("C·∫ßn c√≥ √≠t nh·∫•t m·ªôt b√†i n·ªôp t·ª´ l·ªõp n√†y ƒë·ªÉ c√≥ th·ªÉ xu·∫•t b√°o c√°o.")
                

def display_submission_details(submission_id, submissions, questions, max_possible):
    """Hi·ªÉn th·ªã chi ti·∫øt m·ªôt b√†i n·ªôp"""
    # T√¨m b√†i n·ªôp ƒë∆∞·ª£c ch·ªçn
    submission = next((s for s in submissions if str(s.get("id", "")) == str(submission_id)), None)
    
    if not submission:
        st.error("Kh√¥ng t√¨m th·∫•y b√†i n·ªôp!")
        return
    
    st.subheader(f"üìã Chi ti·∫øt b√†i n·ªôp #{submission_id}")
    
    # Th√¥ng tin t·ªïng quan
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("üìß Email", submission.get("user_email", "N/A"))
    with col2:
        st.metric("üéØ ƒêi·ªÉm s·ªë", f"{submission.get('score', 0)}/{max_possible}")
    with col3:
        timestamp = format_timestamp(submission.get("timestamp"))
        st.metric("‚è∞ Th·ªùi gian", timestamp)
    
    # Chi ti·∫øt c√¢u tr·∫£ l·ªùi
    st.write("### üìù Chi ti·∫øt c√¢u tr·∫£ l·ªùi")
    
    responses = submission.get("responses", {})
    if isinstance(responses, str):
        try:
            responses = json.loads(responses)
        except:
            responses = {}
    
    total_correct = 0
    
    for q in questions:
        q_id = str(q.get("id", ""))
        
        with st.expander(f"C√¢u {q_id}: {q.get('question', '')[:50]}..."):
            # ƒê√°p √°n ng∆∞·ªùi d√πng
            user_ans = responses.get(q_id, [])
            
            # Ki·ªÉm tra ƒë√∫ng/sai
            is_correct = check_answer_correctness(user_ans, q)
            if is_correct:
                total_correct += 1
            
            # Hi·ªÉn th·ªã ƒë√°p √°n
            st.write("**ƒê√°p √°n c·ªßa h·ªçc vi√™n:**")
            if not user_ans:
                st.write("- Kh√¥ng tr·∫£ l·ªùi")
            else:
                for ans in user_ans:
                    st.write(f"- {ans}")
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            if is_correct:
                st.success(f"‚úÖ ƒê√∫ng (+{q.get('score', 0)} ƒëi·ªÉm)")
            else:
                st.error("‚ùå Sai (0 ƒëi·ªÉm)")
                
                # Hi·ªÉn th·ªã ƒë√°p √°n ƒë√∫ng
                correct_answers = get_correct_answers(q)
                st.write("**ƒê√°p √°n ƒë√∫ng:**")
                for ans in correct_answers:
                    st.write(f"- {ans}")
    
    # T·ªïng k·∫øt
    st.write("### üìä T·ªïng k·∫øt")
    col1, col2, col3 = st.columns(3)
    
    col1.metric("S·ªë c√¢u ƒë√∫ng", f"{total_correct}/{len(questions)}")
    col2.metric("ƒêi·ªÉm s·ªë", f"{submission.get('score', 0)}/{max_possible}")
    
    if len(questions) > 0:
        accuracy = (total_correct / len(questions)) * 100
        col3.metric("T·ª∑ l·ªá ƒë√∫ng", f"{accuracy:.1f}%")

# ===============================
# H√ÄM CH√çNH
# ===============================

def view_statistics():
    """Hi·ªÉn th·ªã trang th·ªëng k√™ v√† b√°o c√°o - H√ÄM CH√çNH"""
    st.title("üìä B√°o c√°o & th·ªëng k√™")
    
    # Kh·ªüi t·∫°o bi·∫øn tr∆∞·ªõc
    questions = []
    students = []
    submissions = []
    max_possible = 0
    df_questions = pd.DataFrame()
    df_students_list = pd.DataFrame()
    df_class_stats = pd.DataFrame()
    df_all_submissions = pd.DataFrame()
    
      
    try:
        # S·ª≠ d·ª•ng c√°c h√†m ho√†n thi·ªán
        with st.spinner("üîÑ ƒêang t·∫£i d·ªØ li·ªáu t·ª´ database..."):
            
            # L·∫•y d·ªØ li·ªáu c√¢u h·ªèi
            questions = get_all_questions()
            if questions:
                st.success(f"üìù ƒê√£ t·∫£i {len(questions)} c√¢u h·ªèi")
            else:
                st.warning("‚ö†Ô∏è Kh√¥ng c√≥ c√¢u h·ªèi n√†o trong h·ªá th·ªëng")
            
            # L·∫•y d·ªØ li·ªáu h·ªçc vi√™n v·ªõi role="student"
            students = get_all_users(role="student")
            if students:
                st.success(f"üë• ƒê√£ t·∫£i {len(students)} h·ªçc vi√™n")
            else:
                st.warning("‚ö†Ô∏è Kh√¥ng c√≥ h·ªçc vi√™n n√†o trong h·ªá th·ªëng")
            
            # L·∫•y t·∫•t c·∫£ b√†i n·ªôp
            submissions = get_all_submissions()
            if submissions:
                st.success(f"üìã ƒê√£ t·∫£i {len(submissions)} b√†i n·ªôp")
            else:
                st.warning("‚ö†Ô∏è Kh√¥ng c√≥ b√†i n·ªôp n√†o trong h·ªá th·ªëng")
        
        # T·∫°o form t√¨m ki·∫øm email n·∫øu mu·ªën xem b√°o c√°o theo h·ªçc vi√™n c·ª• th·ªÉ
        with st.sidebar:
            st.subheader("üîç T√¨m ki·∫øm h·ªçc vi√™n")
            
            if students:
                # T·∫°o dropdown v·ªõi email th·ª±c t·∫ø
                student_emails = [s.get("email", "") for s in students if s.get("email")]
                selected_student = st.selectbox(
                    "Ch·ªçn h·ªçc vi√™n:",
                    options=["T·∫•t c·∫£"] + sorted(student_emails),
                    key="sidebar_student_select"
                )
                
                if selected_student != "T·∫•t c·∫£":
                    # L·ªçc submissions theo email ƒë√£ ch·ªçn
                    student_submissions = get_user_submissions(selected_student)
                    if student_submissions:
                        submissions = student_submissions
                        st.success(f"‚úÖ ƒê√£ l·ªçc {len(submissions)} b√†i n·ªôp c·ªßa {selected_student}")
                    else:
                        st.warning(f"‚ö†Ô∏è Kh√¥ng c√≥ b√†i n·ªôp n√†o c·ªßa {selected_student}")
            else:
                st.info("Kh√¥ng c√≥ h·ªçc vi√™n ƒë·ªÉ t√¨m ki·∫øm")
        
        # Ki·ªÉm tra d·ªØ li·ªáu c·∫ßn thi·∫øt
        if not questions:
            st.error("‚ùå Kh√¥ng c√≥ c√¢u h·ªèi n√†o trong h·ªá th·ªëng.")
            st.info("üí° Vui l√≤ng th√™m c√¢u h·ªèi trong ph·∫ßn 'Qu·∫£n l√Ω c√¢u h·ªèi' tr∆∞·ªõc.")
            return
        
        if not students:
            st.error("‚ùå Kh√¥ng c√≥ h·ªçc vi√™n n√†o trong h·ªá th·ªëng.")
            st.info("üí° Vui l√≤ng ki·ªÉm tra l·∫°i database ho·∫∑c c√≥ h·ªçc vi√™n ƒëƒÉng k√Ω.")
            return
            
        if not submissions:
            st.info("‚ÑπÔ∏è Ch∆∞a c√≥ b√†i n·ªôp n√†o. D·ªØ li·ªáu s·∫Ω hi·ªÉn th·ªã sau khi c√≥ h·ªçc vi√™n l√†m b√†i.")
            # V·∫´n hi·ªÉn th·ªã tabs ƒë·ªÉ admin c√≥ th·ªÉ xem c·∫•u tr√∫c
        
        # T·∫°o tab th·ªëng k√™
        tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "üìä T·ªïng quan", 
            "üë§ Theo h·ªçc vi√™n", 
            "‚ùì Theo c√¢u h·ªèi", 
            "üìã Danh s√°ch h·ªçc vi√™n", 
            "üì§ Xu·∫•t b√°o c√°o"
        ])
        
        # T√≠nh t·ªïng ƒëi·ªÉm t·ªëi ƒëa
        max_possible = sum([q.get("score", 0) for q in questions])
        st.info(f"üéØ **T·ªïng ƒëi·ªÉm t·ªëi ƒëa c·ªßa b√†i kh·∫£o s√°t:** {max_possible} ƒëi·ªÉm")
        
        # Chu·∫©n b·ªã d·ªØ li·ªáu cho t·∫•t c·∫£ c√°c submissions
        if submissions:
            all_submission_data = prepare_submission_data(submissions, students, questions, max_possible)
            df_all_submissions = pd.DataFrame(all_submission_data) if all_submission_data else pd.DataFrame()
        
        with tab1:
            display_overview_tab(submissions, students, questions, max_possible)
        
        with tab2:
            display_student_tab(submissions, students, questions, max_possible)
        
        with tab3:
            df_questions = display_question_tab(submissions, questions)
        
        with tab4:
            df_students_list, df_class_stats = display_student_list_tab(submissions, students, max_possible)
        
        with tab5:
            display_export_tab(df_all_submissions, df_questions, df_students_list, df_class_stats)
    
    except Exception as e:
        st.error(f"‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {str(e)}")
        
        # Hi·ªÉn th·ªã th√¥ng tin debug chi ti·∫øt
        with st.expander("üîç Chi ti·∫øt l·ªói"):
            st.code(traceback.format_exc())
            
            st.write("**Th√¥ng tin debug:**")
            st.write(f"- S·ªë c√¢u h·ªèi: {len(questions) if questions else 0}")
            st.write(f"- S·ªë h·ªçc vi√™n: {len(students) if students else 0}")
            st.write(f"- S·ªë b√†i n·ªôp: {len(submissions) if submissions else 0}")
            
            # Hi·ªÉn th·ªã sample data n·∫øu c√≥
            if questions:
                st.write("**Sample Question:**")
                st.json(questions[0])
            
            if students:
                st.write("**Sample Student:**")
                st.json(students[0])
            
            if submissions:
                st.write("**Sample Submission:**")
                st.json(submissions[0])

# ===============================
# C√ÅC H√ÄM XU·∫§T FILE (PLACEHOLDER)
# ===============================

def get_download_link_docx(buffer, filename, text):
    """T·∫°o link t·∫£i xu·ªëng cho file DOCX"""
    b64 = base64.b64encode(buffer.getvalue()).decode()
    href = f'<a href="data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64,{b64}" download="{filename}">üì• {text}</a>'
    return href

def get_download_link_pdf(buffer, filename, text):
    """T·∫°o link t·∫£i xu·ªëng cho file PDF"""
    b64 = base64.b64encode(buffer.getvalue()).decode()
    href = f'<a href="data:application/pdf;base64,{b64}" download="{filename}">üì• {text}</a>'
    return href

def export_to_excel(dataframes, sheet_names, filename):
    """T·∫°o file Excel v·ªõi nhi·ªÅu sheet t·ª´ c√°c DataFrame - ƒê√É C·∫¢I THI·ªÜN"""
    output = io.BytesIO()
    
    try:
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            for df, sheet_name in zip(dataframes, sheet_names):
                if not df.empty:
                    # L√†m s·∫°ch t√™n sheet (lo·∫°i b·ªè k√Ω t·ª± kh√¥ng h·ª£p l·ªá)
                    clean_sheet_name = sheet_name.replace("/", "-").replace("\\", "-")[:31]
                    df.to_excel(writer, sheet_name=clean_sheet_name, index=False)
                    
                    # T·ªëi ∆∞u ƒë·ªô r·ªông c·ªôt
                    worksheet = writer.sheets[clean_sheet_name]
                    for column in worksheet.columns:
                        max_length = 0
                        column_letter = column[0].column_letter
                        
                        for cell in column:
                            try:
                                if len(str(cell.value)) > max_length:
                                    max_length = len(str(cell.value))
                            except:
                                pass
                        
                        adjusted_width = min(max_length + 2, 50)
                        worksheet.column_dimensions[column_letter].width = adjusted_width
        
        output.seek(0)
        data = output.getvalue()
        b64 = base64.b64encode(data).decode()
        href = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" download="{filename}">üì• T·∫£i xu·ªëng {filename}</a>'
        return href
        
    except Exception as e:
        st.error(f"L·ªói khi t·∫°o file Excel: {str(e)}")
        return ""

# ===============================
# C√ÅC H√ÄM XU·∫§T B√ÅO C√ÅO CHI TI·∫æT
# ===============================

def create_student_report_docx(student_name, student_email, student_class, submission, questions, max_possible):
    """T·∫°o b√°o c√°o chi ti·∫øt b√†i l√†m c·ªßa h·ªçc vi√™n d·∫°ng DOCX, bao g·ªìm c√¢u t·ª± lu·∫≠n"""
    try:
        doc = Document()
        
        # Thi·∫øt l·∫≠p font ch·ªØ m·∫∑c ƒë·ªãnh l√† Times New Roman
        style = doc.styles['Normal']
        font = style.font
        font.name = 'Times New Roman'
        font.size = Pt(12)
        
        # Th√™m ti√™u ƒë·ªÅ - font ch·ªØ h·ªó tr·ª£ Unicode
        heading = doc.add_heading(f"B√°o c√°o chi ti·∫øt - {student_name}", level=1)
        heading.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Th√™m th·ªùi gian xu·∫•t b√°o c√°o
        time_paragraph = doc.add_paragraph(f"Th·ªùi gian xu·∫•t b√°o c√°o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        time_paragraph.alignment = WD_ALIGN_PARAGRAPH.RIGHT
        
        # Th√™m th√¥ng tin h·ªçc vi√™n
        doc.add_heading("Th√¥ng tin h·ªçc vi√™n", level=2)
        info_table = doc.add_table(rows=4, cols=2, style='Table Grid')
        
        # ƒê·∫∑t ƒë·ªô r·ªông c·ªôt
        for cell in info_table.columns[0].cells:
            cell.width = Inches(1.5)
        for cell in info_table.columns[1].cells:
            cell.width = Inches(4.5)
        
        # Thi·∫øt l·∫≠p m√†u n·ªÅn cho h√†ng ti√™u ƒë·ªÅ
        for i in range(4):
            # S·ª≠a l·ªói: ƒê·∫£m b·∫£o c√≥ runs tr∆∞·ªõc khi truy c·∫≠p
            cell = info_table.rows[i].cells[0]
            cell_paragraph = cell.paragraphs[0]
            if not cell_paragraph.runs:
                cell_paragraph.add_run(cell.text if cell.text else '')
            cell_paragraph.runs[0].font.bold = True
            
            # Th√™m m√†u n·ªÅn
            shading_elm = parse_xml(r'<w:shd {} w:fill="E9E9E9"/>'.format(nsdecls('w')))
            info_table.rows[i].cells[0]._tc.get_or_add_tcPr().append(shading_elm)
        
        # Th√™m d·ªØ li·ªáu v√†o b·∫£ng th√¥ng tin
        cells = info_table.rows[0].cells
        cells[0].text = "H·ªç v√† t√™n"
        cells[1].text = student_name
        
        cells = info_table.rows[1].cells
        cells[0].text = "Email"
        cells[1].text = student_email
        
        cells = info_table.rows[2].cells
        cells[0].text = "L·ªõp"
        cells[1].text = student_class
        
        # X·ª≠ l√Ω timestamp t∆∞∆°ng th√≠ch v·ªõi c·∫£ hai ki·ªÉu d·ªØ li·ªáu (s·ªë v√† chu·ªói ISO)
        submission_time = format_timestamp(submission.get("timestamp"))
        
        cells = info_table.rows[3].cells
        cells[0].text = "Th·ªùi gian n·ªôp"
        cells[1].text = submission_time
        
        # L·∫•y ƒëi·ªÉm c√¢u h·ªèi t·ª± lu·∫≠n (n·∫øu c√≥)
        essay_grades = {}
        if "essay_grades" in submission:
            if isinstance(submission["essay_grades"], str):
                try:
                    essay_grades = json.loads(submission["essay_grades"])
                except:
                    essay_grades = {}
            else:
                essay_grades = submission.get("essay_grades", {})
                
        # L·∫•y nh·∫≠n x√©t c√¢u h·ªèi t·ª± lu·∫≠n (n·∫øu c√≥)
        essay_comments = {}
        if "essay_comments" in submission:
            if isinstance(submission["essay_comments"], str):
                try:
                    essay_comments = json.loads(submission["essay_comments"])
                except:
                    essay_comments = {}
            else:
                essay_comments = submission.get("essay_comments", {})
        
        # T√≠nh to√°n th√¥ng tin v·ªÅ b√†i l√†m
        total_correct = 0
        total_questions = len(questions)
        
        doc.add_heading("Chi ti·∫øt c√¢u tr·∫£ l·ªùi", level=2)
        
        # T·∫°o b·∫£ng chi ti·∫øt c√¢u tr·∫£ l·ªùi
        answers_table = doc.add_table(rows=1, cols=5, style='Table Grid')
        
        # Thi·∫øt l·∫≠p ƒë·ªô r·ªông t∆∞∆°ng ƒë·ªëi cho c√°c c·ªôt
        col_widths = [2.5, 2, 2, 1, 0.8]  # T·ª∑ l·ªá t∆∞∆°ng ƒë·ªëi
        for i, width in enumerate(col_widths):
            for cell in answers_table.columns[i].cells:
                cell.width = Inches(width)
        
        # Th√™m ti√™u ƒë·ªÅ cho b·∫£ng v·ªõi ƒë·ªãnh d·∫°ng r√µ r√†ng
        header_cells = answers_table.rows[0].cells
        headers = ["C√¢u h·ªèi", "ƒê√°p √°n c·ªßa h·ªçc vi√™n", "ƒê√°p √°n ƒë√∫ng/Nh·∫≠n x√©t", "K·∫øt qu·∫£", "ƒêi·ªÉm"]
        
        # T·∫°o n·ªÅn x√°m cho h√†ng ti√™u ƒë·ªÅ
        for i, cell in enumerate(header_cells):
            cell.text = headers[i]
            for paragraph in cell.paragraphs:
                paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
                # ƒê·∫£m b·∫£o c√≥ runs tr∆∞·ªõc khi truy c·∫≠p
                if not paragraph.runs:
                    paragraph.add_run(headers[i])
                for run in paragraph.runs:
                    run.bold = True
            # Th√™m m√†u n·ªÅn
            shading_elm = parse_xml(r'<w:shd {} w:fill="E9E9E9"/>'.format(nsdecls('w')))
            cell._tc.get_or_add_tcPr().append(shading_elm)
        
        # ƒê·∫£m b·∫£o responses ƒë√∫ng ƒë·ªãnh d·∫°ng
        responses = submission.get("responses", {})
        if isinstance(responses, str):
            try:
                responses = json.loads(responses)
            except:
                responses = {}
        
        # Th√™m d·ªØ li·ªáu c√¢u tr·∫£ l·ªùi v·ªõi ƒë·ªãnh d·∫°ng c·∫£i thi·ªán
        for q in questions:
            q_id = str(q.get("id", ""))
            
            # ƒê√°p √°n ng∆∞·ªùi d√πng
            user_ans = responses.get(q_id, [])
            
            # Ki·ªÉm tra ƒë√∫ng/sai
            is_correct = check_answer_correctness(user_ans, q)
            if is_correct and q.get("type") != "Essay":
                total_correct += 1
            
            # Th√™m h√†ng m·ªõi v√†o b·∫£ng
            row_cells = answers_table.add_row().cells
            
            # Th√™m th√¥ng tin c√¢u h·ªèi
            row_cells[0].text = f"C√¢u {q.get('id', '')}: {q.get('question', '')}"
            
            # X·ª≠ l√Ω n·ªôi dung ƒë√°p √°n d·ª±a tr√™n lo·∫°i c√¢u h·ªèi
            if q.get("type") == "Essay":
                # ƒê·ªëi v·ªõi c√¢u h·ªèi t·ª± lu·∫≠n
                essay_answer = user_ans[0] if user_ans else "Kh√¥ng tr·∫£ l·ªùi"
                row_cells[1].text = essay_answer
                
                # Hi·ªÉn th·ªã nh·∫≠n x√©t gi√°o vi√™n n·∫øu c√≥
                essay_comment = essay_comments.get(q_id, "Ch∆∞a c√≥ nh·∫≠n x√©t")
                row_cells[2].text = essay_comment
                
                # ƒêi·ªÉm c√¢u h·ªèi t·ª± lu·∫≠n
                essay_score = essay_grades.get(q_id, 0)
                
                # K·∫øt qu·∫£ d·ª±a tr√™n vi·ªác h·ªçc vi√™n c√≥ tr·∫£ l·ªùi hay kh√¥ng v√† ƒë√£ ch·∫•m ƒëi·ªÉm ch∆∞a
                if is_correct:
                    if q_id in essay_grades:
                        result = "ƒê√£ ch·∫•m ƒëi·ªÉm"
                        points = essay_score
                    else:
                        result = "Ch∆∞a ch·∫•m ƒëi·ªÉm"
                        points = 0
                else:
                    result = "Kh√¥ng tr·∫£ l·ªùi"
                    points = 0
                
                row_cells[3].text = result
                row_cells[4].text = str(points)
                
            else:
                # ƒê·ªëi v·ªõi c√¢u h·ªèi tr·∫Øc nghi·ªám
                row_cells[1].text = ", ".join([str(a) for a in user_ans]) if user_ans else "Kh√¥ng tr·∫£ l·ªùi"
                
                # Chu·∫©n b·ªã ƒë√°p √°n ƒë√∫ng
                expected = get_correct_answers(q)
                
                row_cells[2].text = ", ".join([str(a) for a in expected])
                row_cells[3].text = "ƒê√∫ng" if is_correct else "Sai"
                row_cells[4].text = str(q.get("score", 0) if is_correct else 0)
            
            # ƒê·∫∑t m√†u cho k·∫øt qu·∫£
            for paragraph in row_cells[3].paragraphs:
                paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
                if not paragraph.runs:
                    paragraph.add_run(row_cells[3].text)
                run = paragraph.runs[0]
                if "ƒê√∫ng" in row_cells[3].text or "ƒê√£ ch·∫•m ƒëi·ªÉm" in row_cells[3].text:
                    run.font.color.rgb = RGBColor(0, 128, 0)  # M√†u xanh l√° cho ƒë√∫ng
                    run.bold = True
                elif "Sai" in row_cells[3].text or "Kh√¥ng tr·∫£ l·ªùi" in row_cells[3].text:
                    run.font.color.rgb = RGBColor(255, 0, 0)  # M√†u ƒë·ªè cho sai
                    run.bold = True
                else:  # Tr∆∞·ªùng h·ª£p "Ch∆∞a ch·∫•m ƒëi·ªÉm"
                    run.font.color.rgb = RGBColor(255, 140, 0)  # M√†u cam
                    run.bold = True
            
            # CƒÉn gi·ªØa c·ªôt ƒëi·ªÉm
            row_cells[4].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Th√™m t·ªïng k·∫øt v·ªõi ƒë·ªãnh d·∫°ng r√µ r√†ng
        doc.add_heading("T·ªïng k·∫øt", level=2)
        summary_table = doc.add_table(rows=3, cols=2, style='Table Grid')
        
        # Thi·∫øt l·∫≠p ƒë·ªô r·ªông cho b·∫£ng t·ªïng k·∫øt
        for cell in summary_table.columns[0].cells:
            cell.width = Inches(1.5)
        for cell in summary_table.columns[1].cells:
            cell.width = Inches(3.0)
        
        # Th√™m m√†u n·ªÅn cho c·ªôt ti√™u ƒë·ªÅ
        for i in range(3):
            cell = summary_table.rows[i].cells[0]
            paragraph = cell.paragraphs[0]
            if not paragraph.runs:
                paragraph.add_run(cell.text if cell.text else '')
            paragraph.runs[0].font.bold = True
            shading_elm = parse_xml(r'<w:shd {} w:fill="E9E9E9"/>'.format(nsdecls('w')))
            cell._tc.get_or_add_tcPr().append(shading_elm)
        
        cells = summary_table.rows[0].cells
        cells[0].text = "S·ªë c√¢u ƒë√∫ng"
        cells[1].text = f"{total_correct}/{total_questions}"
        
        cells = summary_table.rows[1].cells
        cells[0].text = "ƒêi·ªÉm s·ªë"
        cells[1].text = f"{submission.get('score', 0)}/{max_possible}"
        
        cells = summary_table.rows[2].cells
        cells[0].text = "T·ª∑ l·ªá ƒë√∫ng"
        cells[1].text = f"{(total_correct/total_questions*100):.1f}%" if total_questions > 0 else "0%"
        
        # Th√™m ch√¢n trang
        doc.add_paragraph()
        footer = doc.add_paragraph("Xu·∫•t b√°o c√°o t·ª´ H·ªá th·ªëng Kh·∫£o s√°t & ƒê√°nh gi√°")
        footer.alignment = WD_ALIGN_PARAGRAPH.CENTER
        time_footer = doc.add_paragraph(f"Ng√†y xu·∫•t: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        time_footer.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # L∆∞u t·ªáp
        buffer = io.BytesIO()
        doc.save(buffer)
        buffer.seek(0)
        
        return buffer
    except Exception as e:
        print(f"L·ªói khi t·∫°o b√°o c√°o DOCX: {str(e)}")
        traceback.print_exc()
        # Tr·∫£ v·ªÅ buffer tr·ªëng n·∫øu l·ªói
        buffer = io.BytesIO()
        buffer.seek(0)
        return buffer

def create_student_report_pdf_fpdf(student_name, student_email, student_class, submission, questions, max_possible):
    """T·∫°o b√°o c√°o chi ti·∫øt b√†i l√†m c·ªßa h·ªçc vi√™n d·∫°ng PDF s·ª≠ d·ª•ng FPDF2 v·ªõi h·ªó tr·ª£ Unicode, bao g·ªìm c√¢u t·ª± lu·∫≠n"""
    buffer = io.BytesIO()
    
    try:
        # T·∫°o PDF m·ªõi
        pdf = FPDF(orientation='P', unit='mm', format='A4')
        pdf.add_page()
        
        # Thi·∫øt l·∫≠p font cho ti√™u ƒë·ªÅ
        pdf.set_font('Arial', 'B', 16)
        title = f"B√°o c√°o chi ti·∫øt - {student_name}"
        pdf.cell(0, 10, title, 0, 1, 'C')
        
        # Th√™m th·ªùi gian b√°o c√°o
        pdf.set_font('Arial', 'I', 10)
        timestamp = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        pdf.cell(0, 5, f'Th·ªùi gian xu·∫•t b√°o c√°o: {timestamp}', 0, 1, 'R')
        pdf.ln(5)
        
        # T√≠nh to√°n th√¥ng tin v·ªÅ b√†i l√†m
        total_correct = 0
        total_questions = len(questions)
        
        # ƒê·∫£m b·∫£o responses ƒë√∫ng ƒë·ªãnh d·∫°ng
        responses = submission.get("responses", {})
        if isinstance(responses, str):
            try:
                responses = json.loads(responses)
            except:
                responses = {}
                
        # L·∫•y ƒëi·ªÉm c√¢u h·ªèi t·ª± lu·∫≠n (n·∫øu c√≥)
        essay_grades = {}
        if "essay_grades" in submission:
            if isinstance(submission["essay_grades"], str):
                try:
                    essay_grades = json.loads(submission["essay_grades"])
                except:
                    essay_grades = {}
            else:
                essay_grades = submission.get("essay_grades", {})
                
        # L·∫•y nh·∫≠n x√©t c√¢u h·ªèi t·ª± lu·∫≠n (n·∫øu c√≥)
        essay_comments = {}
        if "essay_comments" in submission:
            if isinstance(submission["essay_comments"], str):
                try:
                    essay_comments = json.loads(submission["essay_comments"])
                except:
                    essay_comments = {}
            else:
                essay_comments = submission.get("essay_comments", {})
        
        # X·ª≠ l√Ω timestamp
        submission_time = format_timestamp(submission.get("timestamp"))
        
        # Th√¥ng tin h·ªçc vi√™n
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(0, 10, 'Th√¥ng tin h·ªçc vi√™n', 0, 1, 'L')
        
        # B·∫£ng th√¥ng tin h·ªçc vi√™n
        pdf.set_font('Arial', '', 10)
        info_width = 190
        col1_width = 50
        col2_width = info_width - col1_width
        
        # T·∫°o khung th√¥ng tin h·ªçc vi√™n
        pdf.set_fill_color(240, 240, 240)
        pdf.cell(col1_width, 10, 'H·ªç v√† t√™n', 1, 0, 'L', 1)
        pdf.cell(col2_width, 10, student_name, 1, 1, 'L')
        
        pdf.cell(col1_width, 10, 'Email', 1, 0, 'L', 1)
        pdf.cell(col2_width, 10, student_email, 1, 1, 'L')
        
        pdf.cell(col1_width, 10, 'L·ªõp', 1, 0, 'L', 1)
        pdf.cell(col2_width, 10, student_class, 1, 1, 'L')
        
        pdf.cell(col1_width, 10, 'Th·ªùi gian n·ªôp', 1, 0, 'L', 1)
        pdf.cell(col2_width, 10, submission_time, 1, 1, 'L')
        
        pdf.ln(5)
        
        # Chi ti·∫øt c√¢u tr·∫£ l·ªùi
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(0, 10, 'Chi ti·∫øt c√¢u tr·∫£ l·ªùi', 0, 1, 'L')
        
        # Ti√™u ƒë·ªÅ b·∫£ng chi ti·∫øt
        pdf.set_font('Arial', 'B', 9)
        pdf.set_fill_color(240, 240, 240)
        
        # X√°c ƒë·ªãnh ƒë·ªô r·ªông c·ªôt
        q_width = 65
        user_width = 35
        correct_width = 40
        result_width = 25
        points_width = 15
        
        # V·∫Ω header b·∫£ng
        pdf.cell(q_width, 10, 'C√¢u h·ªèi', 1, 0, 'C', 1)
        pdf.cell(user_width, 10, 'ƒê√°p √°n h·ªçc vi√™n', 1, 0, 'C', 1)
        pdf.cell(correct_width, 10, 'ƒê√°p √°n ƒë√∫ng/Nh·∫≠n x√©t', 1, 0, 'C', 1)
        pdf.cell(result_width, 10, 'K·∫øt qu·∫£', 1, 0, 'C', 1)
        pdf.cell(points_width, 10, 'ƒêi·ªÉm', 1, 1, 'C', 1)
        
        # V·∫Ω d·ªØ li·ªáu c√¢u tr·∫£ l·ªùi
        pdf.set_font('Arial', '', 9)
        
        for q in questions:
            q_id = str(q.get("id", ""))
            
            # ƒê√°p √°n ng∆∞·ªùi d√πng
            user_ans = responses.get(q_id, [])
            
            # Ki·ªÉm tra ƒë√∫ng/sai
            is_correct = check_answer_correctness(user_ans, q)
            if is_correct and q.get("type") != "Essay":
                total_correct += 1
            
            # Chu·∫©n b·ªã n·ªôi dung d·ª±a tr√™n lo·∫°i c√¢u h·ªèi
            question_text = f"C√¢u {q.get('id', '')}: {q.get('question', '')}"
            
            if q.get("type") == "Essay":
                # ƒê·ªëi v·ªõi c√¢u h·ªèi t·ª± lu·∫≠n
                essay_answer = user_ans[0] if user_ans else "Kh√¥ng tr·∫£ l·ªùi"
                user_answer_text = essay_answer[:50] + "..." if len(essay_answer) > 50 else essay_answer
                
                # Nh·∫≠n x√©t c·ªßa gi√°o vi√™n
                essay_comment = essay_comments.get(q_id, "Ch∆∞a c√≥ nh·∫≠n x√©t")
                correct_answer_text = essay_comment[:50] + "..." if len(essay_comment) > 50 else essay_comment
                
                # ƒêi·ªÉm c√¢u h·ªèi t·ª± lu·∫≠n
                essay_score = essay_grades.get(q_id, 0)
                
                # K·∫øt qu·∫£ ch·∫•m ƒëi·ªÉm
                if is_correct:
                    if q_id in essay_grades:
                        result = "ƒê√£ ch·∫•m ƒëi·ªÉm"
                        points = essay_score
                    else:
                        result = "Ch∆∞a ch·∫•m ƒëi·ªÉm"
                        points = 0
                else:
                    result = "Kh√¥ng tr·∫£ l·ªùi"
                    points = 0
            else:
                # ƒê·ªëi v·ªõi c√¢u h·ªèi tr·∫Øc nghi·ªám
                user_answer_text = ", ".join([str(a) for a in user_ans]) if user_ans else "Kh√¥ng tr·∫£ l·ªùi"
                
                # Chu·∫©n b·ªã ƒë√°p √°n ƒë√∫ng
                expected = get_correct_answers(q)
                correct_answer_text = ", ".join([str(a) for a in expected])
                result = "ƒê√∫ng" if is_correct else "Sai"
                points = q.get("score", 0) if is_correct else 0
            
            # V·∫Ω d·ªØ li·ªáu (ƒë∆°n gi·∫£n h√≥a ƒë·ªÉ tr√°nh l·ªói)
            row_height = 10
            
            # L∆∞u v·ªã tr√≠ x hi·ªán t·∫°i
            x = pdf.get_x()
            y = pdf.get_y()
            
            # Ki·ªÉm tra n·∫øu s·∫Ω v∆∞·ª£t qu√° trang
            if y + row_height > pdf.page_break_trigger:
                pdf.add_page()
                y = pdf.get_y()
            
            # V·∫Ω t·ª´ng √¥
            pdf.set_xy(x, y)
            pdf.cell(q_width, row_height, question_text[:30] + "..." if len(question_text) > 30 else question_text, 1, 0, 'L')
            
            pdf.set_xy(x + q_width, y)
            pdf.cell(user_width, row_height, user_answer_text[:20] + "..." if len(user_answer_text) > 20 else user_answer_text, 1, 0, 'L')
            
            pdf.set_xy(x + q_width + user_width, y)
            pdf.cell(correct_width, row_height, correct_answer_text[:25] + "..." if len(correct_answer_text) > 25 else correct_answer_text, 1, 0, 'L')
            
            pdf.set_xy(x + q_width + user_width + correct_width, y)
            pdf.cell(result_width, row_height, result, 1, 0, 'C')
            
            pdf.set_xy(x + q_width + user_width + correct_width + result_width, y)
            pdf.cell(points_width, row_height, str(points), 1, 1, 'C')
        
        pdf.ln(5)
        
        # T·ªïng k·∫øt
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(0, 10, 'T·ªïng k·∫øt', 0, 1, 'L')
        
        # B·∫£ng t·ªïng k·∫øt
        pdf.set_font('Arial', '', 10)
        pdf.set_fill_color(240, 240, 240)
        
        summary_col1 = 50
        summary_col2 = 140
        
        pdf.cell(summary_col1, 10, 'S·ªë c√¢u ƒë√∫ng', 1, 0, 'L', 1)
        pdf.cell(summary_col2, 10, f"{total_correct}/{total_questions}", 1, 1, 'L')
        
        pdf.cell(summary_col1, 10, 'ƒêi·ªÉm s·ªë', 1, 0, 'L', 1)
        pdf.cell(summary_col2, 10, f"{submission.get('score', 0)}/{max_possible}", 1, 1, 'L')
        
        pdf.cell(summary_col1, 10, 'T·ª∑ l·ªá ƒë√∫ng', 1, 0, 'L', 1)
        percent = total_correct/total_questions*100 if total_questions > 0 else 0
        pdf.cell(summary_col2, 10, f"{percent:.1f}% {'(ƒê·∫°t)' if percent >= 50 else '(Ch∆∞a ƒë·∫°t)'}", 1, 1, 'L')
        
        # L∆∞u PDF v√†o buffer
        pdf.output(buffer)
    except Exception as e:
        print(f"L·ªói khi t·∫°o b√°o c√°o PDF: {str(e)}")
        traceback.print_exc()
        
        # T·∫°o b√°o c√°o ƒë∆°n gi·∫£n n·∫øu g·∫∑p l·ªói
        try:
            simple_pdf = FPDF()
            simple_pdf.add_page()
            simple_pdf.set_font('Arial', 'B', 16)
            simple_pdf.cell(0, 10, f'B√°o c√°o chi ti·∫øt - {student_name}', 0, 1, 'C')
            simple_pdf.set_font('Arial', '', 10)
            error_text = f'Kh√¥ng th·ªÉ hi·ªÉn th·ªã b√°o c√°o chi ti·∫øt. Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng DOCX.\nL·ªói: {str(e)}'
            simple_pdf.multi_cell(0, 10, error_text, 0, 'L')
            simple_pdf.output(buffer)
        except Exception as e2:
            print(f"Kh√¥ng th·ªÉ t·∫°o b√°o c√°o thay th·∫ø: {str(e2)}")
    
    buffer.seek(0)
    return buffer

def dataframe_to_docx(df, title, filename):
    """T·∫°o file DOCX t·ª´ DataFrame"""
    try:
        doc = Document()
        
        # Thi·∫øt l·∫≠p font ch·ªØ m·∫∑c ƒë·ªãnh
        style = doc.styles['Normal']
        font = style.font
        font.name = 'Times New Roman'
        font.size = Pt(12)
        
        # Th√™m ti√™u ƒë·ªÅ
        heading = doc.add_heading(title, level=1)
        heading.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Th√™m th·ªùi gian xu·∫•t b√°o c√°o
        time_paragraph = doc.add_paragraph(f"Th·ªùi gian xu·∫•t b√°o c√°o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        time_paragraph.alignment = WD_ALIGN_PARAGRAPH.RIGHT
        
        # T·∫°o b·∫£ng
        # Th√™m m·ªôt h√†ng cho ti√™u ƒë·ªÅ c·ªôt
        table = doc.add_table(rows=1, cols=len(df.columns), style='Table Grid')
        
        # Th√™m ti√™u ƒë·ªÅ c·ªôt
        header_cells = table.rows[0].cells
        for i, col_name in enumerate(df.columns):
            header_cells[i].text = str(col_name)
            # ƒê·∫∑t ki·ªÉu cho ti√™u ƒë·ªÅ
            for paragraph in header_cells[i].paragraphs:
                paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
                run = paragraph.runs[0] if paragraph.runs else paragraph.add_run(str(col_name))
                run.bold = True
        
        # Th√™m d·ªØ li·ªáu
        for _, row in df.iterrows():
            row_cells = table.add_row().cells
            for i, value in enumerate(row):
                row_cells[i].text = str(value)
                # CƒÉn gi·ªØa cho c√°c √¥
                for paragraph in row_cells[i].paragraphs:
                    paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Th√™m ch√¢n trang
        doc.add_paragraph()
        footer = doc.add_paragraph("H·ªá th·ªëng Kh·∫£o s√°t & ƒê√°nh gi√°")
        footer.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # L∆∞u t·ªáp
        buffer = io.BytesIO()
        doc.save(buffer)
        buffer.seek(0)
        
        return buffer
    except Exception as e:
        print(f"L·ªói khi t·∫°o DOCX: {str(e)}")
        st.error(f"Kh√¥ng th·ªÉ t·∫°o file DOCX: {str(e)}")
        # Tr·∫£ v·ªÅ buffer tr·ªëng n·∫øu l·ªói
        buffer = io.BytesIO()
        buffer.seek(0)
        return buffer

def dataframe_to_pdf_fpdf(df, title, filename):
    """T·∫°o file PDF t·ª´ DataFrame s·ª≠ d·ª•ng FPDF2"""
    buffer = io.BytesIO()
    
    try:
        # X√°c ƒë·ªãnh h∆∞·ªõng trang d·ª±a v√†o s·ªë l∆∞·ª£ng c·ªôt
        orientation = 'L' if len(df.columns) > 5 else 'P'
        
        pdf = FPDF(orientation=orientation, unit='mm', format='A4')
        pdf.add_page()
        
        # Th√™m ti√™u ƒë·ªÅ
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(0, 10, title, 0, 1, 'C')
        
        # Th√™m th·ªùi gian b√°o c√°o
        pdf.set_font('Arial', 'I', 10)
        timestamp = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        pdf.cell(0, 5, f'Th·ªùi gian xu·∫•t b√°o c√°o: {timestamp}', 0, 1, 'R')
        pdf.ln(5)
        
        # X√°c ƒë·ªãnh k√≠ch th∆∞·ªõc trang v√† s·ªë c·ªôt
        page_width = 297 if orientation == 'L' else 210
        margin = 10
        usable_width = page_width - 2*margin
        
        # T√≠nh to√°n ƒë·ªô r·ªông c·ªôt
        col_count = len(df.columns)
        col_width = usable_width / col_count if col_count > 0 else 20
        
        # M·∫∑c ƒë·ªãnh font cho n·ªôi dung
        pdf.set_font('Arial', '', 8)
        
        # T·∫°o ti√™u ƒë·ªÅ c·ªôt
        pdf.set_font('Arial', 'B', 9)
        pdf.set_fill_color(240, 240, 240)
        
        for col_name in df.columns:
            # C·∫Øt ng·∫Øn t√™n c·ªôt n·∫øu qu√° d√†i
            display_name = str(col_name)[:15] + "..." if len(str(col_name)) > 15 else str(col_name)
            pdf.cell(col_width, 8, display_name, 1, 0, 'C', 1)
        pdf.ln()
        
        # V·∫Ω n·ªôi dung
        pdf.set_font('Arial', '', 8)
        
        # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng h√†ng
        max_rows = min(100, len(df))
        
        for i in range(max_rows):
            for j, col in enumerate(df.columns):
                content = str(df.iloc[i, j])
                # C·∫Øt ng·∫Øn n·ªôi dung n·∫øu qu√° d√†i
                display_content = content[:20] + "..." if len(content) > 20 else content
                pdf.cell(col_width, 6, display_content, 1, 0, 'L')
            pdf.ln()
        
        # L∆∞u PDF v√†o buffer
        pdf.output(buffer)
        
    except Exception as e:
        print(f"L·ªói khi t·∫°o b√°o c√°o PDF: {str(e)}")
        traceback.print_exc()
        
        # T·∫°o b√°o c√°o ƒë∆°n gi·∫£n n·∫øu g·∫∑p l·ªói
        try:
            simple_pdf = FPDF()
            simple_pdf.add_page()
            simple_pdf.set_font('Arial', 'B', 16)
            simple_pdf.cell(0, 10, title, 0, 1, 'C')
            simple_pdf.set_font('Arial', '', 10)
            simple_pdf.multi_cell(0, 10, f'Kh√¥ng th·ªÉ t·∫°o b√°o c√°o chi ti·∫øt.\nL·ªói: {str(e)}', 0, 'L')
            simple_pdf.output(buffer)
        except Exception as e2:
            print(f"Kh√¥ng th·ªÉ t·∫°o b√°o c√°o thay th·∫ø: {str(e2)}")
    
    buffer.seek(0)
    return buffer

def format_date(date_value):
    """ƒê·ªãnh d·∫°ng ng√†y th√°ng t·ª´ nhi·ªÅu ki·ªÉu d·ªØ li·ªáu kh√°c nhau"""
    if not date_value:
        return "N/A"
    
    try:
        # N·∫øu l√† s·ªë nguy√™n (timestamp)
        if isinstance(date_value, (int, float)):
            return datetime.fromtimestamp(date_value).strftime("%d/%m/%Y")
        
        # N·∫øu l√† chu·ªói ISO (t·ª´ Supabase)
        elif isinstance(date_value, str):
            try:
                # Th·ª≠ parse chu·ªói ISO
                dt = datetime.fromisoformat(date_value.replace('Z', '+00:00'))
                return dt.strftime("%d/%m/%Y")
            except:
                # N·∫øu kh√¥ng ph·∫£i ISO, tr·∫£ v·ªÅ nguy√™n b·∫£n
                return date_value
        
        # N·∫øu ƒë√£ l√† ƒë·ªëi t∆∞·ª£ng datetime
        elif isinstance(date_value, datetime):
            return date_value.strftime("%d/%m/%Y")
            
        # C√°c tr∆∞·ªùng h·ª£p kh√°c, tr·∫£ v·ªÅ d·∫°ng chu·ªói
        else:
            return str(date_value)
    except Exception as e:
        print(f"Error formatting date: {e}, value type: {type(date_value)}, value: {date_value}")
        return "N/A"

def create_class_report(class_name, submissions, students, questions, max_possible):
    """T·∫°o b√°o c√°o t·ªïng h·ª£p theo l·ªõp"""
    try:
        doc = Document()
        
        # Thi·∫øt l·∫≠p font ch·ªØ m·∫∑c ƒë·ªãnh
        style = doc.styles['Normal']
        font = style.font
        font.name = 'Times New Roman'
        font.size = Pt(12)
        
        # Th√™m ti√™u ƒë·ªÅ
        heading = doc.add_heading(f"B√°o c√°o t·ªïng h·ª£p l·ªõp {class_name}", level=1)
        heading.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Th√™m th·ªùi gian xu·∫•t b√°o c√°o
        time_paragraph = doc.add_paragraph(f"Th·ªùi gian xu·∫•t b√°o c√°o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        time_paragraph.alignment = WD_ALIGN_PARAGRAPH.RIGHT
        
        # Th√¥ng tin t·ªïng quan
        doc.add_heading("T·ªïng quan", level=2)
        
        class_students = [s for s in students if s.get("class") == class_name]
        class_submissions = [s for s in submissions if any(st.get("email") == s.get("user_email") for st in class_students)]
        
        info_table = doc.add_table(rows=5, cols=2, style='Table Grid')
        
        # Thi·∫øt l·∫≠p ƒë·ªô r·ªông c·ªôt
        for cell in info_table.columns[0].cells:
            cell.width = Inches(2)
        for cell in info_table.columns[1].cells:
            cell.width = Inches(4)
        
        # Th√™m d·ªØ li·ªáu
        rows_data = [
            ("T√™n l·ªõp", class_name),
            ("S·ªë h·ªçc vi√™n", str(len(class_students))),
            ("S·ªë b√†i n·ªôp", str(len(class_submissions))),
            ("ƒêi·ªÉm trung b√¨nh", f"{sum(s.get('score', 0) for s in class_submissions) / len(class_submissions):.2f}/{max_possible}" if class_submissions else "0"),
            ("Ng√†y xu·∫•t b√°o c√°o", datetime.now().strftime('%d/%m/%Y'))
        ]
        
        for i, (label, value) in enumerate(rows_data):
            cells = info_table.rows[i].cells
            cells[0].text = label
            cells[1].text = value
            
            # ƒê·∫∑t in ƒë·∫≠m cho c·ªôt ƒë·∫ßu
            cells[0].paragraphs[0].runs[0].bold = True
        
        # B·∫£ng k·∫øt qu·∫£ chi ti·∫øt
        doc.add_heading("K·∫øt qu·∫£ chi ti·∫øt", level=2)
        
        if class_submissions:
            # T·∫°o b·∫£ng k·∫øt qu·∫£
            results_table = doc.add_table(rows=1, cols=5, style='Table Grid')
            
            # Header
            header_cells = results_table.rows[0].cells
            headers = ["H·ªç t√™n", "Email", "Th·ªùi gian n·ªôp", "ƒêi·ªÉm s·ªë", "T·ª∑ l·ªá (%)"]
            
            for i, header in enumerate(headers):
                header_cells[i].text = header
                header_cells[i].paragraphs[0].runs[0].bold = True
                header_cells[i].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            # D·ªØ li·ªáu
            for submission in class_submissions:
                row_cells = results_table.add_row().cells
                
                # T√¨m th√¥ng tin h·ªçc vi√™n
                student_info = next((s for s in class_students if s.get("email") == submission.get("user_email")), None)
                student_name = student_info.get("full_name", "Kh√¥ng x√°c ƒë·ªãnh") if student_info else "Kh√¥ng x√°c ƒë·ªãnh"
                
                # X·ª≠ l√Ω timestamp
                timestamp = submission.get("timestamp", "")
                if isinstance(timestamp, str):
                    try:
                        dt = datetime.fromisoformat(timestamp.replace("Z", "+00:00"))
                        submit_time = dt.strftime("%d/%m/%Y %H:%M")
                    except:
                        submit_time = "Kh√¥ng x√°c ƒë·ªãnh"
                else:
                    try:
                        submit_time = datetime.fromtimestamp(timestamp).strftime("%d/%m/%Y %H:%M")
                    except:
                        submit_time = "Kh√¥ng x√°c ƒë·ªãnh"
                
                score = submission.get("score", 0)
                percentage = (score / max_possible * 100) if max_possible > 0 else 0
                
                row_cells[0].text = student_name
                row_cells[1].text = submission.get("user_email", "")
                row_cells[2].text = submit_time
                row_cells[3].text = f"{score}/{max_possible}"
                row_cells[4].text = f"{percentage:.1f}%"
                
                # CƒÉn gi·ªØa c√°c √¥
                for cell in row_cells:
                    cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Th·ªëng k√™ theo c√¢u h·ªèi
        doc.add_heading("Th·ªëng k√™ theo c√¢u h·ªèi", level=2)
        
        question_stats = {}
        for q in questions:
            q_id = str(q.get("id"))
            correct_count = 0
            total_count = 0
            
            for submission in class_submissions:
                responses = submission.get("responses", {})
                if isinstance(responses, str):
                    try:
                        responses = json.loads(responses)
                    except:
                        responses = {}
                
                if q_id in responses:
                    total_count += 1
                    user_ans = responses[q_id]
                    if check_answer_correctness(user_ans, q):
                        correct_count += 1
            
            if total_count > 0:
                question_stats[q_id] = {
                    "question": q.get("question", ""),
                    "correct": correct_count,
                    "total": total_count,
                    "percentage": (correct_count / total_count) * 100
                }
        
        if question_stats:
            stats_table = doc.add_table(rows=1, cols=4, style='Table Grid')
            
            # Header
            header_cells = stats_table.rows[0].cells
            headers = ["C√¢u h·ªèi", "S·ªë c√¢u ƒë√∫ng", "T·ªïng s·ªë", "T·ª∑ l·ªá ƒë√∫ng (%)"]
            
            for i, header in enumerate(headers):
                header_cells[i].text = header
                header_cells[i].paragraphs[0].runs[0].bold = True
                header_cells[i].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            # D·ªØ li·ªáu
            for q_id, stats in question_stats.items():
                row_cells = stats_table.add_row().cells
                
                row_cells[0].text = f"C√¢u {q_id}: {stats['question'][:50]}..."
                row_cells[1].text = str(stats['correct'])
                row_cells[2].text = str(stats['total'])
                row_cells[3].text = f"{stats['percentage']:.1f}%"
                
                # CƒÉn gi·ªØa c√°c √¥ s·ªë
                for i in range(1, 4):
                    row_cells[i].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Ch√¢n trang
        doc.add_paragraph()
        footer = doc.add_paragraph("B√°o c√°o ƒë∆∞·ª£c t·∫°o b·ªüi H·ªá th·ªëng Kh·∫£o s√°t & ƒê√°nh gi√°")
        footer.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # L∆∞u t·ªáp
        buffer = io.BytesIO()
        doc.save(buffer)
        buffer.seek(0)
        
        return buffer
        
    except Exception as e:
        print(f"L·ªói khi t·∫°o b√°o c√°o l·ªõp: {str(e)}")
        buffer = io.BytesIO()
        buffer.seek(0)
        return buffer

def create_overall_report(submissions, students, questions, max_possible):
    """T·∫°o b√°o c√°o t·ªïng h·ª£p to√†n b·ªô h·ªá th·ªëng"""
    try:
        doc = Document()
        
        # Thi·∫øt l·∫≠p font ch·ªØ m·∫∑c ƒë·ªãnh
        style = doc.styles['Normal']
        font = style.font
        font.name = 'Times New Roman'
        font.size = Pt(12)
        
        # Th√™m ti√™u ƒë·ªÅ
        heading = doc.add_heading("B√°o c√°o t·ªïng h·ª£p h·ªá th·ªëng", level=1)
        heading.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Th√™m th·ªùi gian xu·∫•t b√°o c√°o
        time_paragraph = doc.add_paragraph(f"Th·ªùi gian xu·∫•t b√°o c√°o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        time_paragraph.alignment = WD_ALIGN_PARAGRAPH.RIGHT
        
        # Th√¥ng tin t·ªïng quan
        doc.add_heading("Th√¥ng tin t·ªïng quan", level=2)
        
        # Th·ªëng k√™ c∆° b·∫£n
        total_students = len(students)
        total_submissions = len(submissions)
        avg_score = sum(s.get('score', 0) for s in submissions) / len(submissions) if submissions else 0
        
        # Th·ªëng k√™ theo l·ªõp
        classes = {}
        for student in students:
            class_name = student.get("class", "Kh√¥ng x√°c ƒë·ªãnh")
            if class_name not in classes:
                classes[class_name] = 0
            classes[class_name] += 1
        
        info_table = doc.add_table(rows=6, cols=2, style='Table Grid')
        
        rows_data = [
            ("T·ªïng s·ªë h·ªçc vi√™n", str(total_students)),
            ("T·ªïng s·ªë b√†i n·ªôp", str(total_submissions)),
            ("ƒêi·ªÉm trung b√¨nh", f"{avg_score:.2f}/{max_possible}"),
            ("S·ªë l·ªõp tham gia", str(len(classes))),
            ("S·ªë c√¢u h·ªèi", str(len(questions))),
            ("Ng√†y xu·∫•t b√°o c√°o", datetime.now().strftime('%d/%m/%Y'))
        ]
        
        for i, (label, value) in enumerate(rows_data):
            cells = info_table.rows[i].cells
            cells[0].text = label
            cells[1].text = value
            cells[0].paragraphs[0].runs[0].bold = True
        
        # Th·ªëng k√™ theo l·ªõp
        doc.add_heading("Th·ªëng k√™ theo l·ªõp", level=2)
        
        class_table = doc.add_table(rows=1, cols=4, style='Table Grid')
        
        # Header
        header_cells = class_table.rows[0].cells
        headers = ["L·ªõp", "S·ªë h·ªçc vi√™n", "S·ªë b√†i n·ªôp", "ƒêi·ªÉm trung b√¨nh"]
        
        for i, header in enumerate(headers):
            header_cells[i].text = header
            header_cells[i].paragraphs[0].runs[0].bold = True
            header_cells[i].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # D·ªØ li·ªáu theo l·ªõp
        for class_name, student_count in classes.items():
            class_students = [s for s in students if s.get("class") == class_name]
            class_submissions = [s for s in submissions if any(st.get("email") == s.get("user_email") for st in class_students)]
            
            class_avg = sum(s.get('score', 0) for s in class_submissions) / len(class_submissions) if class_submissions else 0
            
            row_cells = class_table.add_row().cells
            row_cells[0].text = class_name
            row_cells[1].text = str(student_count)
            row_cells[2].text = str(len(class_submissions))
            row_cells[3].text = f"{class_avg:.2f}/{max_possible}"
            
            for i in range(1, 4):
                row_cells[i].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Top 10 h·ªçc vi√™n
        doc.add_heading("Top 10 h·ªçc vi√™n xu·∫•t s·∫Øc", level=2)
        
        # T√≠nh ƒëi·ªÉm cao nh·∫•t c·ªßa m·ªói h·ªçc vi√™n
        student_best_scores = {}
        for submission in submissions:
            email = submission.get("user_email")
            score = submission.get("score", 0)
            
            if email not in student_best_scores or score > student_best_scores[email]["score"]:
                student_info = next((s for s in students if s.get("email") == email), None)
                student_best_scores[email] = {
                    "score": score,
                    "name": student_info.get("full_name", "Kh√¥ng x√°c ƒë·ªãnh") if student_info else "Kh√¥ng x√°c ƒë·ªãnh",
                    "class": student_info.get("class", "Kh√¥ng x√°c ƒë·ªãnh") if student_info else "Kh√¥ng x√°c ƒë·ªãnh"
                }
        
        # S·∫Øp x·∫øp v√† l·∫•y top 10
        top_students = sorted(student_best_scores.values(), key=lambda x: x["score"], reverse=True)[:10]
        
        if top_students:
            top_table = doc.add_table(rows=1, cols=4, style='Table Grid')
            
            # Header
            header_cells = top_table.rows[0].cells
            headers = ["H·∫°ng", "H·ªç t√™n", "L·ªõp", "ƒêi·ªÉm cao nh·∫•t"]
            
            for i, header in enumerate(headers):
                header_cells[i].text = header
                header_cells[i].paragraphs[0].runs[0].bold = True
                header_cells[i].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            # D·ªØ li·ªáu
            for i, student in enumerate(top_students):
                row_cells = top_table.add_row().cells
                row_cells[0].text = str(i + 1)
                row_cells[1].text = student["name"]
                row_cells[2].text = student["class"]
                row_cells[3].text = f"{student['score']}/{max_possible}"
                
                for cell in row_cells:
                    cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Ch√¢n trang
        doc.add_paragraph()
        footer = doc.add_paragraph("B√°o c√°o ƒë∆∞·ª£c t·∫°o b·ªüi H·ªá th·ªëng Kh·∫£o s√°t & ƒê√°nh gi√°")
        footer.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # L∆∞u t·ªáp
        buffer = io.BytesIO()
        doc.save(buffer)
        buffer.seek(0)
        
        return buffer
        
    except Exception as e:
        print(f"L·ªói khi t·∫°o b√°o c√°o t·ªïng h·ª£p: {str(e)}")
        buffer = io.BytesIO()
        buffer.seek(0)
        return buffer

# ===============================
# C√ÅC H√ÄM T∆Ø∆†NG TH√çCH
# ===============================

def get_submission_statistics():
    """L·∫•y th·ªëng k√™ submissions - ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code c≈©"""
    try:
        submissions = get_all_submissions()
        if not submissions:
            return {
                "total_submissions": 0,
                "student_count": 0,
                "avg_score": 0,
                "total_possible_score": 0,
                "daily_counts": {}
            }
        
        # T√≠nh th·ªëng k√™
        total_submissions = len(submissions)
        unique_students = len(set([s.get("user_email") for s in submissions]))
        scores = [s.get("score", 0) for s in submissions]
        avg_score = sum(scores) / len(scores) if scores else 0
        
        # T√≠nh t·ªïng ƒëi·ªÉm c√≥ th·ªÉ
        questions = get_all_questions()
        total_possible_score = sum([q.get("score", 0) for q in questions])
        
        # Th·ªëng k√™ theo ng√†y
        daily_counts = {}
        for s in submissions:
            timestamp = s.get("timestamp")
            if timestamp:
                try:
                    if isinstance(timestamp, (int, float)):
                        date_str = datetime.fromtimestamp(timestamp).strftime("%Y-%m-%d")
                    else:
                        dt = datetime.fromisoformat(timestamp.replace("Z", "+00:00"))
                        date_str = dt.strftime("%Y-%m-%d")
                    
                    daily_counts[date_str] = daily_counts.get(date_str, 0) + 1
                except:
                    continue
        
        return {
            "total_submissions": total_submissions,
            "student_count": unique_students,
            "avg_score": avg_score,
            "total_possible_score": total_possible_score,
            "daily_counts": daily_counts
        }
        
    except Exception as e:
        print(f"L·ªói khi l·∫•y submission statistics: {str(e)}")
        return {
            "total_submissions": 0,
            "student_count": 0,
            "avg_score": 0,
            "total_possible_score": 0,
            "daily_counts": {}
        }

# Ch·ªâ ch·∫°y h√†m main khi ch·∫°y file n√†y tr·ª±c ti·∫øp
if __name__ == "__main__":
    st.set_page_config(
        page_title="B√°o c√°o & Th·ªëng k√™",
        page_icon="üìä",
        layout="wide",
    )
    view_statistics()
